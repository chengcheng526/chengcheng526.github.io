<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MybatisPlus的入门学习</title>
    <url>/2023/12/07/MybatisPlus/</url>
    <content><![CDATA[<h1 id="1-MybatisPlus的介绍"><a href="#1-MybatisPlus的介绍" class="headerlink" title="1.MybatisPlus的介绍"></a>1.MybatisPlus的介绍</h1><h2 id="1-1-MybatisPlus简介"><a href="#1-1-MybatisPlus简介" class="headerlink" title="1.1 MybatisPlus简介"></a>1.1 MybatisPlus简介</h2><p>MybatisPlus官方地址:<a href="https://baomidou.com/">MyBatis-Plus (baomidou.com)</a></p>
<p>MybatisPlus 简称 MP ，是一个Mybatis的增强工具，在Mybatis的基础上只做增强不做改变，为简化开发、提高效率而生。</p>
<p>使用了MybatisPlus并不意味着不使用Mybatis技术，就如官方说的:<strong>在Mybatis的基础上只做增强不做改变</strong>.</p>
<h2 id="1-2-MybatisPlus的特性"><a href="#1-2-MybatisPlus的特性" class="headerlink" title="1.2 MybatisPlus的特性"></a>1.2 MybatisPlus的特性</h2><ul>
<li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li>
<li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li>
<li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li>
<li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li>
<li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li>
<li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li>
<li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li>
<li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li>
<li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li>
<li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li>
<li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li>
<li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li>
</ul>
<h1 id="2-MybatisPlus的快速使用"><a href="#2-MybatisPlus的快速使用" class="headerlink" title="2.MybatisPlus的快速使用"></a>2.MybatisPlus的快速使用</h1><h2 id="2-1-导入sql"><a href="#2-1-导入sql" class="headerlink" title="2.1 导入sql"></a>2.1 导入sql</h2><p>在使用MybatisPlus之前首先导入所需sql</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 导出 mp 的数据库结构</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `mp` <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci */</span> <span class="comment">/*!80016 DEFAULT ENCRYPTION=&#x27;N&#x27; */</span>;</span><br><span class="line">USE `mp`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出  表 mp.address 结构</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `address` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `user_id` <span class="type">bigint</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户ID&#x27;</span>,</span><br><span class="line">  `province` <span class="type">varchar</span>(<span class="number">10</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;省&#x27;</span>,</span><br><span class="line">  `city` <span class="type">varchar</span>(<span class="number">10</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;市&#x27;</span>,</span><br><span class="line">  `town` <span class="type">varchar</span>(<span class="number">10</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;县/区&#x27;</span>,</span><br><span class="line">  `mobile` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;手机&#x27;</span>,</span><br><span class="line">  `street` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;详细地址&#x27;</span>,</span><br><span class="line">  `contact` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;联系人&#x27;</span>,</span><br><span class="line">  `is_default` bit(<span class="number">1</span>) <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;是否是默认 1默认 0否&#x27;</span>,</span><br><span class="line">  `notes` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;备注&#x27;</span>,</span><br><span class="line">  `deleted` bit(<span class="number">1</span>) <span class="keyword">DEFAULT</span> b<span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;逻辑删除&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  KEY `user_id` (`user_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">71</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3 ROW_FORMAT<span class="operator">=</span>COMPACT;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正在导出表  mp.address 的数据：~11 rows (大约)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `address` (`id`, `user_id`, `province`, `city`, `town`, `mobile`, `street`, `contact`, `is_default`, `notes`, `deleted`) <span class="keyword">VALUES</span></span><br><span class="line">	(<span class="number">59</span>, <span class="number">2</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;朝阳区&#x27;</span>, <span class="string">&#x27;13900112222&#x27;</span>, <span class="string">&#x27;金燕龙办公楼&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>, b<span class="string">&#x27;1&#x27;</span>, <span class="keyword">NULL</span>, b<span class="string">&#x27;0&#x27;</span>),</span><br><span class="line">	(<span class="number">60</span>, <span class="number">1</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;朝阳区&#x27;</span>, <span class="string">&#x27;13700221122&#x27;</span>, <span class="string">&#x27;修正大厦&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, <span class="keyword">NULL</span>, b<span class="string">&#x27;0&#x27;</span>),</span><br><span class="line">	(<span class="number">61</span>, <span class="number">1</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;浦东新区&#x27;</span>, <span class="string">&#x27;13301212233&#x27;</span>, <span class="string">&#x27;航头镇航头路&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>, b<span class="string">&#x27;1&#x27;</span>, <span class="keyword">NULL</span>, b<span class="string">&#x27;0&#x27;</span>),</span><br><span class="line">	(<span class="number">63</span>, <span class="number">2</span>, <span class="string">&#x27;广东&#x27;</span>, <span class="string">&#x27;佛山&#x27;</span>, <span class="string">&#x27;永春&#x27;</span>, <span class="string">&#x27;13301212233&#x27;</span>, <span class="string">&#x27;永春武馆&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, <span class="keyword">NULL</span>, b<span class="string">&#x27;0&#x27;</span>),</span><br><span class="line">	(<span class="number">64</span>, <span class="number">3</span>, <span class="string">&#x27;浙江&#x27;</span>, <span class="string">&#x27;杭州&#x27;</span>, <span class="string">&#x27;拱墅区&#x27;</span>, <span class="string">&#x27;13567809102&#x27;</span>, <span class="string">&#x27;浙江大学&#x27;</span>, <span class="string">&#x27;Hope&#x27;</span>, b<span class="string">&#x27;1&#x27;</span>, <span class="keyword">NULL</span>, b<span class="string">&#x27;0&#x27;</span>),</span><br><span class="line">	(<span class="number">65</span>, <span class="number">3</span>, <span class="string">&#x27;浙江&#x27;</span>, <span class="string">&#x27;杭州&#x27;</span>, <span class="string">&#x27;拱墅区&#x27;</span>, <span class="string">&#x27;13967589201&#x27;</span>, <span class="string">&#x27;左岸花园&#x27;</span>, <span class="string">&#x27;Hope&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, <span class="keyword">NULL</span>, b<span class="string">&#x27;0&#x27;</span>),</span><br><span class="line">	(<span class="number">66</span>, <span class="number">4</span>, <span class="string">&#x27;湖北&#x27;</span>, <span class="string">&#x27;武汉&#x27;</span>, <span class="string">&#x27;汉口&#x27;</span>, <span class="string">&#x27;13967519202&#x27;</span>, <span class="string">&#x27;天天花园&#x27;</span>, <span class="string">&#x27;Thomas&#x27;</span>, b<span class="string">&#x27;1&#x27;</span>, <span class="keyword">NULL</span>, b<span class="string">&#x27;0&#x27;</span>),</span><br><span class="line">	(<span class="number">67</span>, <span class="number">3</span>, <span class="string">&#x27;浙江&#x27;</span>, <span class="string">&#x27;杭州&#x27;</span>, <span class="string">&#x27;拱墅区&#x27;</span>, <span class="string">&#x27;13967589201&#x27;</span>, <span class="string">&#x27;左岸花园&#x27;</span>, <span class="string">&#x27;Hopey&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, <span class="keyword">NULL</span>, b<span class="string">&#x27;0&#x27;</span>),</span><br><span class="line">	(<span class="number">68</span>, <span class="number">4</span>, <span class="string">&#x27;湖北&#x27;</span>, <span class="string">&#x27;武汉&#x27;</span>, <span class="string">&#x27;汉口&#x27;</span>, <span class="string">&#x27;13967519202&#x27;</span>, <span class="string">&#x27;天天花园&#x27;</span>, <span class="string">&#x27;Thomas&#x27;</span>, b<span class="string">&#x27;1&#x27;</span>, <span class="keyword">NULL</span>, b<span class="string">&#x27;0&#x27;</span>),</span><br><span class="line">	(<span class="number">69</span>, <span class="number">3</span>, <span class="string">&#x27;浙江&#x27;</span>, <span class="string">&#x27;杭州&#x27;</span>, <span class="string">&#x27;拱墅区&#x27;</span>, <span class="string">&#x27;13967589201&#x27;</span>, <span class="string">&#x27;左岸花园&#x27;</span>, <span class="string">&#x27;Hopey&#x27;</span>, b<span class="string">&#x27;0&#x27;</span>, <span class="keyword">NULL</span>, b<span class="string">&#x27;0&#x27;</span>),</span><br><span class="line">	(<span class="number">70</span>, <span class="number">4</span>, <span class="string">&#x27;湖北&#x27;</span>, <span class="string">&#x27;武汉&#x27;</span>, <span class="string">&#x27;汉口&#x27;</span>, <span class="string">&#x27;13967519202&#x27;</span>, <span class="string">&#x27;天天花园&#x27;</span>, <span class="string">&#x27;Thomas&#x27;</span>, b<span class="string">&#x27;1&#x27;</span>, <span class="keyword">NULL</span>, b<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出  表 mp.user 结构</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">	`id` <span class="type">BIGINT</span>(<span class="number">19</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">	`username` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span> <span class="keyword">COLLATE</span> <span class="string">&#x27;utf8_general_ci&#x27;</span>,</span><br><span class="line">	`password` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span> <span class="keyword">COLLATE</span> <span class="string">&#x27;utf8_general_ci&#x27;</span>,</span><br><span class="line">	`phone` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;注册手机号&#x27;</span> <span class="keyword">COLLATE</span> <span class="string">&#x27;utf8_general_ci&#x27;</span>,</span><br><span class="line">	`info` JSON <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;详细信息&#x27;</span>,</span><br><span class="line">	`status` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;使用状态（1正常 2冻结）&#x27;</span>,</span><br><span class="line">	`balance` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;账户余额&#x27;</span>,</span><br><span class="line">	`create_time` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">	`update_time` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">	<span class="keyword">UNIQUE</span> INDEX `username` (`username`) <span class="keyword">USING</span> BTREE</span><br><span class="line">)</span><br><span class="line">COMMENT<span class="operator">=</span><span class="string">&#x27;用户表&#x27;</span></span><br><span class="line"><span class="keyword">COLLATE</span><span class="operator">=</span><span class="string">&#x27;utf8_general_ci&#x27;</span></span><br><span class="line">ENGINE<span class="operator">=</span>InnoDB</span><br><span class="line">ROW_FORMAT<span class="operator">=</span>COMPACT</span><br><span class="line">AUTO_INCREMENT<span class="operator">=</span><span class="number">5</span></span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正在导出表  mp.user 的数据：~4 rows (大约)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` (`id`, `username`, `password`, `phone`, `info`, `status`, `balance`, `create_time`, `update_time`) <span class="keyword">VALUES</span></span><br><span class="line">	(<span class="number">1</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;13900112224&#x27;</span>, <span class="string">&#x27;&#123;&quot;age&quot;: 20, &quot;intro&quot;: &quot;佛系青年&quot;, &quot;gender&quot;: &quot;male&quot;&#125;&#x27;</span>, <span class="number">1</span>, <span class="number">1600</span>, <span class="string">&#x27;2023-05-19 20:50:21&#x27;</span>, <span class="string">&#x27;2023-06-19 20:50:21&#x27;</span>),</span><br><span class="line">	(<span class="number">2</span>, <span class="string">&#x27;Rose&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;13900112223&#x27;</span>, <span class="string">&#x27;&#123;&quot;age&quot;: 19, &quot;intro&quot;: &quot;青涩少女&quot;, &quot;gender&quot;: &quot;female&quot;&#125;&#x27;</span>, <span class="number">1</span>, <span class="number">600</span>, <span class="string">&#x27;2023-05-19 21:00:23&#x27;</span>, <span class="string">&#x27;2023-06-19 21:00:23&#x27;</span>),</span><br><span class="line">	(<span class="number">3</span>, <span class="string">&#x27;Hope&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;13900112222&#x27;</span>, <span class="string">&#x27;&#123;&quot;age&quot;: 25, &quot;intro&quot;: &quot;上进青年&quot;, &quot;gender&quot;: &quot;male&quot;&#125;&#x27;</span>, <span class="number">1</span>, <span class="number">100000</span>, <span class="string">&#x27;2023-06-19 22:37:44&#x27;</span>, <span class="string">&#x27;2023-06-19 22:37:44&#x27;</span>),</span><br><span class="line">	(<span class="number">4</span>, <span class="string">&#x27;Thomas&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;17701265258&#x27;</span>, <span class="string">&#x27;&#123;&quot;age&quot;: 29, &quot;intro&quot;: &quot;伏地魔&quot;, &quot;gender&quot;: &quot;male&quot;&#125;&#x27;</span>, <span class="number">1</span>, <span class="number">800</span>, <span class="string">&#x27;2023-06-19 23:44:45&#x27;</span>, <span class="string">&#x27;2023-06-19 23:44:45&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>创建完成后使用本地的Navicat工具查询两张表看是否执行成功</p>
<p>使用 <code>select * from use</code>查询user表得到下图数据</p>
<p><img src="https://pic.imgdb.cn/item/6571cab0c458853aef33d496.jpg" alt="user表查询结果"></p>
<p>使用<code>select * from address</code>查询address表得到下图数据</p>
<p><img src="https://pic.imgdb.cn/item/6571cb38c458853aef36672c.jpg" alt="查询address表结果"></p>
<h2 id="2-2-创建SpringBoot项目工程"><a href="#2-2-创建SpringBoot项目工程" class="headerlink" title="2.2 创建SpringBoot项目工程"></a>2.2 创建SpringBoot项目工程</h2><p>创建SpringBoot项目工程，创建时选择所需依赖<strong>Mysql</strong>，<strong>lombok</strong>，<strong>Mybatis</strong>,<strong>单元测试</strong>依赖.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2-2-1-准备配置"><a href="#2-2-1-准备配置" class="headerlink" title="2.2.1 准备配置"></a>2.2.1 准备配置</h3><p>项目创建好后准备所需配置，在properties目录下创建application.yaml,并填写相关配置例如:数据库配置等</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment"># 数据库url地址</span></span><br><span class="line">    <span class="attr">url:</span> </span><br><span class="line">    <span class="comment"># 驱动名称 mysql8.0版本后需要加入cj</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">username:</span> </span><br><span class="line">    <span class="comment"># 密码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">20212501006</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">dateformat:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"><span class="comment"># mybatis xml 配置文件扫描</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:mapper/*.xml</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-2-准备相关类以及xml配置文件"><a href="#2-2-2-准备相关类以及xml配置文件" class="headerlink" title="2.2.2 准备相关类以及xml配置文件"></a>2.2.2 准备相关类以及xml配置文件</h3><p>在项目根目录下创建mapper包，包中添加UserMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    User <span class="title function_">queryUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">queryUserByIds</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> List&lt;Long&gt; ids)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在resource目录下创建mapper包，创建UserMapper.xml文件(UserMapper.xml相对于resource的路径要与UserMapper相对于java根目录的路径相同):</p>
<p>这里可以看出，如果使用Mybatis进行sql语句的开发，还是需要写很多繁琐的sql，MP就是简化了这些sql的书写</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mp.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;saveUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itheima.mp.domain.po.User&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO `user` (`id`, `username`, `password`, `phone`, `info`, `balance`)</span><br><span class="line">        VALUES</span><br><span class="line">        (#&#123;id&#125;, #&#123;username&#125;, #&#123;password&#125;, #&#123;phone&#125;, #&#123;info&#125;, #&#123;balance&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itheima.mp.domain.po.User&quot;</span>&gt;</span></span><br><span class="line">        UPDATE `user`</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null&quot;</span>&gt;</span></span><br><span class="line">                `username`=#&#123;username&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password != null&quot;</span>&gt;</span></span><br><span class="line">                `password`=#&#123;password&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;phone != null&quot;</span>&gt;</span></span><br><span class="line">                `phone`=#&#123;phone&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;info != null&quot;</span>&gt;</span></span><br><span class="line">                `info`=#&#123;info&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">                `status`=#&#123;status&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;balance != null&quot;</span>&gt;</span></span><br><span class="line">                `balance`=#&#123;balance&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        WHERE `id`=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itheima.mp.domain.po.User&quot;</span>&gt;</span></span><br><span class="line">        DELETE FROM user WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.mp.domain.po.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT *</span><br><span class="line">        FROM user</span><br><span class="line">        WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserByIds&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.mp.domain.po.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT *</span><br><span class="line">        FROM user</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ids != null&quot;</span>&gt;</span></span><br><span class="line">            WHERE id IN</span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">                #&#123;id&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        LIMIT 10</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>项目创建完成后，导入使用所需类User类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册手机号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 详细信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用状态（1正常 2冻结）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 账户余额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer balance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>导入所需的类后需要在启动类上加上两个注解</p>
<ul>
<li>@SpringBootApplication:SpringBoot程序启动类</li>
<li>@MapperScan() 扫描Mapper接口包</li>
</ul>
<h2 id="2-3-使用MybatisPlus"><a href="#2-3-使用MybatisPlus" class="headerlink" title="2.3 使用MybatisPlus"></a>2.3 使用MybatisPlus</h2><h3 id="2-3-1-引入MybatisPlus依赖"><a href="#2-3-1-引入MybatisPlus依赖" class="headerlink" title="2.3.1 引入MybatisPlus依赖"></a>2.3.1 引入MybatisPlus依赖</h3><p>MyBatisPlus官方提供了starter，其中集成了Mybatis和MybatisPlus的所有功能，并且实现了自动装配效果。因此我们可以用MybatisPlus的starter代替Mybatis的starter.</p>
<p>注释掉pom文件中的mybatis依赖，导入MybatisPlus依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-2-定义Mapper"><a href="#2-3-2-定义Mapper" class="headerlink" title="2.3.2  定义Mapper"></a>2.3.2  定义Mapper</h3><p>在之前写的Mapper接口上继承BaseMapper并指定泛型为操作的实体类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要继承BaseMapper 并 指定泛型为操作的类 这里是User类</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    User <span class="title function_">queryUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">queryUserByIds</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> List&lt;Long&gt; ids)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-3-测试mapper"><a href="#2-3-3-测试mapper" class="headerlink" title="2.3.3 测试mapper"></a>2.3.3 测试mapper</h3><h4 id="2-3-3-1-测试Mybatis方法"><a href="#2-3-3-1-测试Mybatis方法" class="headerlink" title="2.3.3.1 测试Mybatis方法"></a>2.3.3.1 测试Mybatis方法</h4><p>由于MybatisPlus对Mybatis是无侵入的，因此即使继承了BaseMapper，自己在Mapper中定义的接口依然可以调用</p>
<p>编写测试类以及测试方法testSelectById()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.queryUserById(<span class="number">4L</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里会调用自己在xml文件中写的方法</p>
<p>查看结果，查询成功</p>
<p><img src="https://pic.imgdb.cn/item/6571d2c6c458853aef5c4650.jpg" alt="查询成功"></p>
<p>虽然成功了，但是sql十分复杂</p>
<h4 id="2-3-3-2-测试MybatisPlus方法"><a href="#2-3-3-2-测试MybatisPlus方法" class="headerlink" title="2.3.3.2 测试MybatisPlus方法"></a>2.3.3.2 测试MybatisPlus方法</h4><p>为简化Mybatis开发的复杂性，MybatisPlus简化了sql的书写，不需要开发者自己书写单表的部分sql</p>
<p>删除xml中的sql语句以及mapper接口中的所有方法(这里只是删除了简单但是繁琐的sql，如果有特殊需要还是需要自己定义方法并实现)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mp.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在测试方法中使用MybatisPlus的方法进行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">5L</span>);</span><br><span class="line">        user.setUsername(<span class="string">&quot;Lucy&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;18688990011&quot;</span>);</span><br><span class="line">        user.setBalance(<span class="number">200</span>);</span><br><span class="line">        user.setInfo(<span class="string">&quot;&#123;\&quot;age\&quot;: 24, \&quot;intro\&quot;: \&quot;英文老师\&quot;, \&quot;gender\&quot;: \&quot;female\&quot;&#125;&quot;</span>);</span><br><span class="line">        user.setCreateTime(LocalDateTime.now());</span><br><span class="line">        user.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">4L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUpdateById</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">5L</span>);</span><br><span class="line">        user.setBalance(<span class="number">20000</span>);</span><br><span class="line">        userMapper.updateById(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testDeleteUser</span><span class="params">()</span> &#123;</span><br><span class="line">        userMapper.deleteById(<span class="number">5L</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>测试通过</p>
<h2 id="2-4-MybatisPlus-API总结"><a href="#2-4-MybatisPlus-API总结" class="headerlink" title="2.4 MybatisPlus API总结"></a>2.4 MybatisPlus API总结</h2><p><img src="https://pic.imgdb.cn/item/6571d526c458853aef686695.jpg" alt="MybatisPlus API总结"></p>
<h1 id="3-Mybatis常用注解"><a href="#3-Mybatis常用注解" class="headerlink" title="3.Mybatis常用注解"></a>3.Mybatis常用注解</h1><p>MyBatisPlus通过扫描实体类，并基于反射获取实体类信息作为数据库表信息。这里体现在在定义mapper时需继承BaseMapper并指定泛型为所操作的实体类.</p>
<p>因此在使用MybatisPlus进行开发的时候有些规定:</p>
<ul>
<li>类名驼峰转下划线作为表明</li>
</ul>
<p>例如实体类的名称为User，则对应的表名为User；实体类的名称为UserInfo，则对应的表名为user_info(数据库表名不区分大小写)</p>
<ul>
<li>名为id的字段作为主键</li>
<li>变量名驼峰转下划线作为表的字段名</li>
</ul>
<p>例如实体类中的属性createTime对应着表中的create_time字段,单字段的则属性名和字段名相同，例如username，phone，info等</p>
<p>使用这种方法，MybatisPlus则可以通过反射知道实体类与表的相关联系</p>
<p><strong>如果定义类中的属性名和MP规定的不一致怎么办？</strong></p>
<p><strong>通过注解自定义配置</strong></p>
<h2 id="3-1-注解介绍"><a href="#3-1-注解介绍" class="headerlink" title="3.1 注解介绍"></a>3.1 注解介绍</h2><p>MybatisPlus中比较常用的几个注解如下：</p>
<ul>
<li>@TableName：用来指定表名</li>
<li>@TableId：用来指定表中的主键字段信息</li>
<li>@TableField：用来指定表中的普通字段信息</li>
</ul>
<p>例如:</p>
<ul>
<li>表的名称为tb_user,但是实体类的名称为User，则出现了不符合MP规范的情况，则可以使用@TableName(value&#x3D;”tb_user”)来进行匹配</li>
<li>表的主键为id，实体类的属性名叫userId,则出现了不符合规范的情况，使用@TableId(value &#x3D; “id”)(如果一致则不需要使用注解)</li>
</ul>
<p>在数据库的表中，主键常常具有类型，例如:自增等。MybatisPlus对此也有对应的属性来指定主键的类型 @TableId(value&#x3D;””,type&#x3D;”IdType.AUTO”)</p>
<ul>
<li>AUTO : 数据库自增长</li>
<li>INPUT:通过set方法自行输入</li>
<li>ASSIGN_ID:分配id，接口IdentifierGenerator的方法nextId来生成id，默认实现类为DefaultifierGenerator雪花算法</li>
</ul>
<p><strong>这里需要注意的是表中一定要有主键，不然后续无法使用MybatisPlus根据主键进行增删改查操作</strong></p>
<p>如果类中的属性名和表的字段名没有按照MP的规范，则需要使用@TableField来进行匹配</p>
<ul>
<li>例如类中的属性名为name，但是表中的字段名为username，则需要使用注解匹配 @TableField(“username”)</li>
<li>如果类中的属性名为is开头的布尔类型，属性名为isMarried，字段名为is_married则也需要使用@TableField(“is_married”)</li>
<li>属性名和数据库的关键字冲突，则也需要使用@TableField(“<code> order</code>“)注解</li>
<li>如果类中的属性不为表中的字段，则需要使用@TableField(exist &#x3D; false)</li>
</ul>
<p><strong>以上注解不是MP的全部注解，只是部分，如果了解更多注解，可以去官网查看</strong></p>
<h1 id="4-Mybatis配置项"><a href="#4-Mybatis配置项" class="headerlink" title="4.Mybatis配置项"></a>4.Mybatis配置项</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MybatisPlus 下面的配置大多数都是默认值 除了包扫描</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.itheima.mp.domain.po</span> <span class="comment"># 别名扫描包</span></span><br><span class="line">		<span class="attr">mapper-locations:</span> <span class="string">&quot;classpath*:/mapper/**/*.xml&quot;</span> <span class="comment"># Mapper.xml文件地址，默认值  </span></span><br><span class="line">		<span class="attr">configuration:</span>    </span><br><span class="line">		<span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span> <span class="comment"># 是否开启下划线和驼峰的映射</span></span><br><span class="line">			<span class="attr">cache-enabled:</span> <span class="literal">false</span> <span class="comment"># 是否开启二级缓存</span></span><br><span class="line">  <span class="attr">global-config:</span> </span><br><span class="line">  <span class="attr">db-config:</span>      </span><br><span class="line">  	<span class="attr">id-type:</span> <span class="string">assign_id</span> <span class="comment"># id为雪花算法生成</span></span><br><span class="line">  	<span class="comment"># 例如根据id更新User类时，传递的是User实体类，User实体类中只有Id和username是非空的 因此会根据id更改username</span></span><br><span class="line">  	<span class="attr">update-strategy:</span> <span class="string">not_null</span> <span class="comment"># 更新策略：只更新非空字段</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果配置类记不清楚可以去官网查询 <a href="https://baomidou.com/">MyBatis-Plus (baomidou.com)</a>，或者根据yaml文件的自动提示书写</p>
<h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h1><p>使用MybatisPlus的步骤:</p>
<ol>
<li>引入MybatisPlus的依赖替代Mybatis依赖</li>
<li>自定义Mapper并继承BaseMapper指定泛型</li>
<li>在实体类添加注解声明表信息以及启动类上扫描mapper</li>
<li>在application.yaml中填写配置信息例如包扫描，驼峰命名，起别名等</li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>MybatisPlus</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>MybatisPlus核心功能</title>
    <url>/2023/12/08/MybatisPlus%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id="1-条件构造器"><a href="#1-条件构造器" class="headerlink" title="1.条件构造器"></a>1.条件构造器</h1><p>之前学习的MybatisPlus只是简单的根据id(主键)去进行简单的增删改查，现在使用条件构造器可以自定义语句。</p>
<h2 id="1-1-条件构造器方法介绍"><a href="#1-1-条件构造器方法介绍" class="headerlink" title="1.1 条件构造器方法介绍"></a>1.1 条件构造器方法介绍</h2><p>条件构造器的具体用法可以查看MP的官方网站</p>
<p><a href="https://baomidou.com/pages/10c804/">MP条件构造器</a></p>
<h2 id="1-2-案例"><a href="#1-2-案例" class="headerlink" title="1.2 案例"></a>1.2 案例</h2><h3 id="1-2-1-需求"><a href="#1-2-1-需求" class="headerlink" title="1.2.1 需求"></a>1.2.1 需求</h3><p><strong>查询出名字中带o的，存款大于等于1000元的人的id，username，info，balance字段</strong>（表的创建以及结构可以查看<a href="https://cn.yccpersonal.com/2023/12/07/MybatisPlus/">MP的基本使用</a>）</p>
<p>如果使用sql语句，应该是下面的sql</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id, username, info, balance <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username <span class="keyword">like</span> ? <span class="keyword">and</span> balance <span class="operator">&gt;=</span> ?</span><br></pre></td></tr></table></figure>

<p><strong>更新用户名为jack的用户余额为2000</strong></p>
<p>如果使用sql语句，应该是下面的sql</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> balance <span class="operator">=</span> <span class="number">2000</span> <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;jack&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>更新id为1，2，4的用户的余额扣除200</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">200</span> <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<h3 id="1-2-2-使用MP构造器"><a href="#1-2-2-使用MP构造器" class="headerlink" title="1.2.2 使用MP构造器"></a>1.2.2 使用MP构造器</h3><p>1.<strong>查询出名字中带o的，存款大于等于1000元的人的id，username，info，balance字段</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 构件查询条件</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;()</span><br><span class="line">            <span class="comment">// 选择要查询的内容</span></span><br><span class="line">            .select(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;username&quot;</span>,<span class="string">&quot;info&quot;</span>,<span class="string">&quot;balance&quot;</span>)</span><br><span class="line">            <span class="comment">// like即为模糊查询 即 &quot;%0%&quot;</span></span><br><span class="line">            .like(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;0&quot;</span>)</span><br><span class="line">            <span class="comment">// ge 即 &gt;=</span></span><br><span class="line">            .ge(<span class="string">&quot;balance&quot;</span>,<span class="number">1000</span>);</span><br><span class="line">    <span class="comment">// 查询</span></span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.<strong>更新用户名为jack的用户余额为2000</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 准备需要改变的实体类 设置Balance为2000</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setBalance(<span class="number">2000</span>);</span><br><span class="line">    <span class="comment">// 准备查询条件 username = &#x27;jack&#x27;</span></span><br><span class="line">    UpdateWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;User&gt;()</span><br><span class="line">            .eq(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">    <span class="comment">// update 需要传递两个参数 一个是用于赋值的实体类 一个是wrapper条件</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> userMapper.update(user, wrapper);</span><br><span class="line">    System.out.println(update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.<strong>更新id为1，2，4的用户的余额扣除200</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateWrapper</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="comment">// 准备更新的id列表 因为in()需要指定要更改的字段以及列表</span></span><br><span class="line">     List&lt;Long&gt; ids = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">     <span class="comment">// jdk9 可以使用 List&lt;Long&gt; ids = List.of(1L,2L,3L);</span></span><br><span class="line">     ids.add(<span class="number">1L</span>);</span><br><span class="line">     ids.add(<span class="number">2L</span>);</span><br><span class="line">     ids.add(<span class="number">3L</span>);</span><br><span class="line">     UpdateWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;User&gt;()</span><br><span class="line">           <span class="comment">// 手写sql setsql()方法</span></span><br><span class="line">           .setSql(<span class="string">&quot;balance = balance - 200&quot;</span>)</span><br><span class="line">           <span class="comment">// in() 两个参数 第一个参数是字段名 第二个参数是列表</span></span><br><span class="line">           .in(<span class="string">&quot;id&quot;</span>,ids);</span><br><span class="line">     <span class="comment">// 执行更新操作</span></span><br><span class="line">     userMapper.update(<span class="literal">null</span>,wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>但是上述的写法术语硬编码，具有大量的魔法值，不推荐。因此在开发中经常使用lambda语法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLambdaWrapper</span><span class="params">()</span>&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;()</span><br><span class="line">        	<span class="comment">// 使用User::method来获取属性名</span></span><br><span class="line">            .select(User::getId,User::getUsername,User::getInfo,User::getBalance)</span><br><span class="line">            .like(User::getUsername,<span class="string">&quot;o&quot;</span>)</span><br><span class="line">            .ge(User::getBalance,<span class="number">1000</span>);</span><br><span class="line">    <span class="comment">// 查询</span></span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">    System.out.println(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-3-总结"><a href="#1-2-3-总结" class="headerlink" title="1.2.3 总结"></a>1.2.3 总结</h3><p><strong>条件构造器的用法</strong></p>
<ul>
<li>QueryWrapper和LambdaQueryWrapper通常用来构建select，delete，update和where条件部分</li>
<li>UpdateWrapper和LambdaUpdateWrapper通常只在set语句比较特殊才使用</li>
<li>尽量使用LambdaQueryWrapper和LamdaUpdateWrapper，避免硬编码，魔法值</li>
</ul>
<h1 id="2-自定义sql"><a href="#2-自定义sql" class="headerlink" title="2.自定义sql"></a>2.自定义sql</h1><p>我们可以利用MyBatisPlus的Wrapper来构建复杂的Where条件，然后自己定义SQL语句中剩下的部分。</p>
<h2 id="2-1-需求"><a href="#2-1-需求" class="headerlink" title="2.1 需求"></a>2.1 需求</h2><p><strong>将id在指定范围的用户(例如1,2,4)的余额扣减指定值</strong></p>
<p>如果自己写sql：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">update</span> id<span class="operator">=</span>&quot;updateBalanceByIds&quot;<span class="operator">&gt;</span>   </span><br><span class="line">	<span class="keyword">UPDATE</span> <span class="keyword">user</span>   </span><br><span class="line">	<span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> #&#123;amount&#125;</span><br><span class="line">	<span class="keyword">WHERE</span> id <span class="keyword">IN</span></span><br><span class="line">	<span class="operator">&lt;</span>foreach collection<span class="operator">=</span>&quot;ids&quot; separator<span class="operator">=</span>&quot;,&quot; item<span class="operator">=</span>&quot;id&quot; <span class="keyword">open</span><span class="operator">=</span>&quot;(&quot; <span class="keyword">close</span><span class="operator">=</span>&quot;)&quot;<span class="operator">&gt;</span> #&#123;id&#125;  <span class="operator">&lt;</span><span class="operator">/</span>foreach<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">update</span><span class="operator">&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2-2-使用MP完成sql"><a href="#2-2-使用MP完成sql" class="headerlink" title="2.2 使用MP完成sql"></a>2.2 使用MP完成sql</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateWrapper</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="comment">// 准备更新的id列表 因为in()需要指定要更改的字段以及列表</span></span><br><span class="line">     List&lt;Long&gt; ids = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">     <span class="comment">// jdk9 可以使用 List&lt;Long&gt; ids = List.of(1L,2L,3L);</span></span><br><span class="line">     ids.add(<span class="number">1L</span>);</span><br><span class="line">     ids.add(<span class="number">2L</span>);</span><br><span class="line">     ids.add(<span class="number">3L</span>);</span><br><span class="line">     UpdateWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;User&gt;()</span><br><span class="line">           <span class="comment">// 手写sql setsql()方法</span></span><br><span class="line">           .setSql(<span class="string">&quot;balance = balance - 200&quot;</span>)</span><br><span class="line">           <span class="comment">// in() 两个参数 第一个参数是字段名 第二个参数是列表</span></span><br><span class="line">           .in(<span class="string">&quot;id&quot;</span>,ids);</span><br><span class="line">     <span class="comment">// 执行更新操作</span></span><br><span class="line">     userMapper.update(<span class="literal">null</span>,wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>MP更擅长的是where语句的编写</strong></p>
<p>MP擅长where语句的编写，但是对于select部分，MP无法实现复杂的select，MP只能简单的查询某个或某些字段，但是无法实现查询count()或者起别名等操作，于是就出现了自定义sql。用户自己编写select部分，where部分交给MP完成</p>
<h2 id="2-3-使用步骤"><a href="#2-3-使用步骤" class="headerlink" title="2.3 使用步骤"></a>2.3 使用步骤</h2><ul>
<li>基于Wrapper构建where条件</li>
<li>在mapper方法参数中使用Param注解声明wrapper变量名称，必须是ew</li>
<li>自定义sql，并使用Wrapper</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCustomSqlUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">// 准备更新的id列表 因为in()需要指定要更改的字段以及列表</span></span><br><span class="line">       List&lt;Long&gt; ids = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       ids.add(<span class="number">1L</span>);</span><br><span class="line">       ids.add(<span class="number">2L</span>);</span><br><span class="line">       ids.add(<span class="number">3L</span>);</span><br><span class="line">       <span class="type">int</span> <span class="variable">amount</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">       <span class="comment">// 自定义条件</span></span><br><span class="line">       QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;()</span><br><span class="line">               .in(<span class="string">&quot;id&quot;</span>,ids);</span><br><span class="line">       <span class="comment">// 调用自定义方法</span></span><br><span class="line">       userMapper.updateBalanceByIds(wrapper,amount);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>在UserMapper中书写自定义方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">updateBalanceByIds</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> QueryWrapper&lt;User&gt; wrapper, <span class="meta">@Param(&quot;amount&quot;)</span> <span class="type">int</span> amount)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>其中QueryWrapper前面必须加上注解@Param(“ew”)或者@Param(Constants.WRAPPER)</strong></p>
<p>在xml文件中编写select部分，where部分使用${ew.customSqlsegment}代替</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBalanceByIds&quot;</span>&gt;</span></span><br><span class="line">        update user set balance = balance - #&#123;amount&#125; $&#123;ew.customSqlSegment&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="3-IService接口"><a href="#3-IService接口" class="headerlink" title="3.IService接口"></a>3.IService接口</h1><h2 id="3-1-IService接口总结"><a href="#3-1-IService接口总结" class="headerlink" title="3.1 IService接口总结"></a>3.1 IService接口总结</h2><p><img src="https://pic.imgdb.cn/item/657319c2c458853aef5e3ee2.jpg" alt="IService接口总结"></p>
<h2 id="3-2-IService的使用"><a href="#3-2-IService的使用" class="headerlink" title="3.2 IService的使用"></a>3.2 IService的使用</h2><p>在使用Mybatis进行开发的过程中，通常是先创建UserService接口，书写方法，然后创建UserServiceImpl实现UserService接口，然后实现方法。但是现在使用MP的IService后，使用UserService接口继承IService接口，这样以来UserServiceImpl就需要实现IService的所有方法，如果不实现所有的方法会爆粗，因此我们需要使用UserServiceImpl去继承ServiceImp,因为ServiceImpl是IService的实现类。</p>
<p>定义接口，接口需要继承IService接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义接口实现类，实现类需要实现IUserService以及继承IService的实现类ServiceImpl，其中ServiceImpl需要指定两个泛型，第一个泛型是Service实现类所需要用到的Mapper，这里是UserMapper，第二个所需的是操作的实体类，这里是User</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加测试类</p>
<p>添加测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">       user.setUsername(<span class="string">&quot;jerry&quot;</span>);</span><br><span class="line">       user.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">       user.setPhone(<span class="string">&quot;18688990011&quot;</span>);</span><br><span class="line">       user.setBalance(<span class="number">200</span>);</span><br><span class="line">       user.setInfo(<span class="string">&quot;&#123;\&quot;age\&quot;: 24, \&quot;intro\&quot;: \&quot;英文老师\&quot;, \&quot;gender\&quot;: \&quot;female\&quot;&#125;&quot;</span>);</span><br><span class="line">       user.setCreateTime(LocalDateTime.now());</span><br><span class="line">       user.setUpdateTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">       <span class="type">boolean</span> <span class="variable">save</span> <span class="operator">=</span> iUserService.save(user);</span><br><span class="line">       System.out.println(save);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>查询测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">byId</span> <span class="operator">=</span> iUserService.getById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(byId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-3-总结"><a href="#3-3-总结" class="headerlink" title="3.3 总结"></a>3.3 总结</h2><p>MP的Service接口的使用流程</p>
<ul>
<li>自定义Service接口继承IService接口</li>
<li>自定义接口实现类实现自定义接口并继承ServiceImpl实现类</li>
<li>指定实现类泛型&lt;所使用到的Mapper，所操作的实体类&gt;</li>
</ul>
<h1 id="4-IService的Lambda查询"><a href="#4-IService的Lambda查询" class="headerlink" title="4.IService的Lambda查询"></a>4.IService的Lambda查询</h1><h2 id="4-1-需求"><a href="#4-1-需求" class="headerlink" title="4.1 需求"></a>4.1 需求</h2><p><strong>需求：实现一个根据复杂条件查询用户的接口，查询条件如下:</strong></p>
<ul>
<li>name:用户名关键字，可以为空</li>
<li>status：用户状态，可以为空</li>
<li>minBalance：最小余额，可以为空</li>
<li>maxBalance：最大余额，可以为空</li>
</ul>
<p>如果使用mybatis原生的写法，则是下面的语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.mp.domain.po.User&quot;</span>&gt;</span>    </span><br><span class="line">    SELECT *  </span><br><span class="line">    FROM tb_user    </span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span>       </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span>            </span><br><span class="line">            AND username LIKE #&#123;name&#125;        </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span>          </span><br><span class="line">            AND `status` = #&#123;status&#125;        </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;minBalance != null and maxBalance != null&quot;</span>&gt;</span>    </span><br><span class="line">            AND balance BETWEEN #&#123;minBalance&#125; AND #&#123;maxBalance&#125;     </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上述的sql还是进行了简化的，因为minBalance和maxBalance也可能一个为null，一个不为null</p>
<p><strong>需求：改造根据id修改用户余额的接口，要求如下</strong></p>
<ul>
<li>完成对用户状态的检验</li>
<li>完成对用户余额的校验</li>
<li>如果扣减后余额为0，则将用户status修改为冻结状态(2)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deductBalance</span><span class="params">(Long id, Integer money)</span> &#123;</span><br><span class="line">       <span class="comment">// 查询用户</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(id);</span><br><span class="line">       <span class="comment">// 校验用户状态</span></span><br><span class="line">       <span class="keyword">if</span> (user == <span class="literal">null</span> || user.getStatus() == <span class="number">2</span>)&#123;</span><br><span class="line">           <span class="comment">// 用户有问题</span></span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户状态异常&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 检验用户金额是否充足</span></span><br><span class="line">       <span class="keyword">if</span> (user.getBalance() &lt; money)&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户余额不足&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 扣减金额</span></span><br><span class="line">       userMapper.deductBalance(id,money);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>之前实现过这个方法,现在需要添加如果扣减后余额为0，则将用户status修改为冻结状态</p>
<h2 id="4-2-MP实现"><a href="#4-2-MP实现" class="headerlink" title="4.2 MP实现"></a>4.2 MP实现</h2><h3 id="4-2-1-需求一实现"><a href="#4-2-1-需求一实现" class="headerlink" title="4.2.1 需求一实现"></a>4.2.1 需求一实现</h3><p>首先在IUserService中定义方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">queryUsers</span><span class="params">(String name, Integer status, Integer minBalance, Integer maxBalance)</span>;</span><br></pre></td></tr></table></figure>

<p>然后在UserService中实现方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 复杂sql的实现</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minBalance</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxBalance</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">queryUsers</span><span class="params">(String name, Integer status, Integer minBalance, Integer maxBalance)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lambdaQuery()</span><br><span class="line">                .like(name != <span class="literal">null</span>, User::getUsername, name)</span><br><span class="line">                .eq(status != <span class="literal">null</span>, User::getStatus, status)</span><br><span class="line">                .ge(minBalance != <span class="literal">null</span>, User::getBalance, minBalance)</span><br><span class="line">                .le(maxBalance != <span class="literal">null</span>, User::getBalance, maxBalance)</span><br><span class="line">                <span class="comment">// 查询一个就one() 集合就list() 数量count() 分页page()</span></span><br><span class="line">                .list();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里需要额外提出的一点是实现类中能够直接使用IService提供的方法，因为UserService继承了ServiceImpl，因此能够使用IService的方法，比如list(),IService会通过调用BaseMapper去实现方法.</p>
<h3 id="4-2-2-需求二实现"><a href="#4-2-2-需求二实现" class="headerlink" title="4.2.2 需求二实现"></a>4.2.2 需求二实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deductBalance</span><span class="params">(Long id, Integer money)</span> &#123;</span><br><span class="line">    <span class="comment">// 查询用户</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(id);</span><br><span class="line">    <span class="comment">// 校验用户状态</span></span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span> || user.getStatus() == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="comment">// 用户有问题</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户状态异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检验用户金额是否充足</span></span><br><span class="line">    <span class="keyword">if</span> (user.getBalance() &lt; money)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户余额不足&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算剩余余额</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">remainBalance</span> <span class="operator">=</span> user.getBalance() - money;</span><br><span class="line">    <span class="comment">// 扣减金额</span></span><br><span class="line">    lambdaUpdate()</span><br><span class="line">            .set(User::getBalance,remainBalance)</span><br><span class="line">            .set(remainBalance == <span class="number">0</span>,User::getStatus,<span class="number">2</span>)</span><br><span class="line">            .eq(User::getId,id)</span><br><span class="line">            .update();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>这里需要注意的是在最后需要添加update(),因为之前只是构建sql，只有添加了update()方法后才是执行sql</strong></p>
<p><strong>上述的方法可能会出现一定的线程安全问题，因此最好需要上锁</strong></p>
<h1 id="5-IService批量新增"><a href="#5-IService批量新增" class="headerlink" title="5.IService批量新增"></a>5.IService批量新增</h1><h2 id="5-1-需求"><a href="#5-1-需求" class="headerlink" title="5.1 需求"></a>5.1 需求</h2><ul>
<li>普通for循环插入</li>
<li>IService的批量插入</li>
<li>开启rewriteBatchedStatements&#x3D;true参数</li>
</ul>
<h2 id="5-2-测试"><a href="#5-2-测试" class="headerlink" title="5.2 测试"></a>5.2 测试</h2><h3 id="5-2-1-普通for循环插入"><a href="#5-2-1-普通for循环插入" class="headerlink" title="5.2.1 普通for循环插入"></a>5.2.1 普通for循环插入</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> User <span class="title function_">buildUsers</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">       user.setUsername(<span class="string">&quot;user_&quot;</span> + i);</span><br><span class="line">       user.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">       user.setPhone(<span class="string">&quot;&quot;</span> + (<span class="number">18688190000L</span> + i));</span><br><span class="line">       user.setBalance(<span class="number">2000</span>);</span><br><span class="line">       user.setInfo(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">       user.setCreateTime(LocalDateTime.now());</span><br><span class="line">       user.setUpdateTime(user.getCreateTime());</span><br><span class="line">       <span class="keyword">return</span> user;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSaveOneByOne</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">           userService.save(buildUsers(i));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">       System.out.println(<span class="string">&quot;耗时 &quot;</span> + (end - start));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>消耗的时间为:210005</p>
<h3 id="5-2-2-IService的批量插入"><a href="#5-2-2-IService的批量插入" class="headerlink" title="5.2.2 IService的批量插入"></a>5.2.2 IService的批量插入</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSaveBatch</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">// 我们每次批量插入1000条数据 插入100次即10万条数据</span></span><br><span class="line">       <span class="comment">// 准备一个容量为1000的集合</span></span><br><span class="line">       List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">1000</span>);</span><br><span class="line">       <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100000</span>; i++) &#123;</span><br><span class="line">           <span class="comment">// 添加一个user</span></span><br><span class="line">           list.add(buildUsers(i));</span><br><span class="line">           <span class="comment">// 每1000条批量插入一次</span></span><br><span class="line">           <span class="keyword">if</span> (i % <span class="number">1000</span> == <span class="number">0</span>)&#123;</span><br><span class="line">               userService.saveBatch(list);</span><br><span class="line">               list.clear();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>消耗的时间为26258，效率提升接近十倍.</p>
<p>虽然使用了IService的批处理，但是实际上还是一条一条插入的，因此需要在application.yaml的url中添加参数:rewriteBatchedStatements&#x3D;true</p>
<p>最后消耗的时间为：6200，效率极大的提升，原因如下:</p>
<p>在<code>testSaveOneByOne()</code>方法中，通过循环调用<code>userService.save()</code>方法逐条插入数据。每次插入都会执行一次SQL语句和数据库操作，这会带来较大的性能开销。</p>
<p>而在<code>testSaveBatch()</code>方法中，我们使用了<code>saveBatch()</code>方法，该方法是MyBatis-Plus提供的批量插入数据的方法。通过将多个实体对象一次性传入，可以减少与数据库的交互次数，从而提高性能。具体实现原理是，MyBatis-Plus会根据底层数据库的不同，选择合适的方式进行批量插入，如使用MySQL的<code>INSERT INTO ... VALUES (),(),...</code>语法进行批量插入。</p>
<p>总结起来，使用<code>IService</code>接口的<code>saveBatch()</code>方法能够提高效率的原因是减少了与数据库的交互次数，通过一次性插入多条数据来降低开销.</p>
<h2 id="5-3-总结"><a href="#5-3-总结" class="headerlink" title="5.3 总结"></a>5.3 总结</h2><ul>
<li>普通for循环逐条插入速度极差，不推荐</li>
<li>MP的批量新增，基于预编译的批处理，性能不错</li>
<li>配置jdbc参数，开rewriteBatchedStatements,性能最好</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>MybatisPlus</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>MybatisPlus扩展功能</title>
    <url>/2023/12/10/Mybatis%E6%89%A9%E5%B1%95%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id="1-MP的代码生成"><a href="#1-MP的代码生成" class="headerlink" title="1.MP的代码生成"></a>1.MP的代码生成</h1><p>使用MybatisPlus的基本步骤:</p>
<ul>
<li>准备实体类，并且在实体类上加上注解。例如:@TableName,@TableId()等</li>
<li>准备实体类Mapper，Mapper继承BaseMapper并指定泛型</li>
<li>准备实体类Service接口，继承IService接口并指定泛型</li>
<li>准备实体类Service实现类并继承ServiceImpl指定泛型(所需Mapper以及实体类),并且实现Service接口</li>
</ul>
<p>上述的步骤都是比较固定的，只是表名，接口名等信息不同。因此可以使用MP的代码生成通过表明生成类。</p>
<p>MP<a href="https://baomidou.com/pages/779a6e/">代码生成官网信息</a>使用MP官网提供的方法还是需要写很多代码，这并不方便，我们可以使用MP官方退出的插件MybatisX快速开发插件</p>
<p>这里我们使用的是MybatisPlus(插件名).</p>
<h2 id="1-1-插件的使用"><a href="#1-1-插件的使用" class="headerlink" title="1.1 插件的使用"></a>1.1 插件的使用</h2><p><img src="https://pic.imgdb.cn/item/6575a5f3c458853aef4865f1.jpg"></p>
<p>上图是利用插件并且数据库连接成功后的页面</p>
<p><img src="https://pic.imgdb.cn/item/6575a62ec458853aef4947bf.jpg"></p>
<p>上图相关配置解析</p>
<p><img src="https://pic.imgdb.cn/item/6575a720c458853aef4d6ef9.jpg"></p>
<p>上图为配置完成后的信息</p>
<p>点击code generatro后会发现实体类已经生成</p>
<h1 id="2-MP的静态工具"><a href="#2-MP的静态工具" class="headerlink" title="2.MP的静态工具"></a>2.MP的静态工具</h1><h2 id="2-1静态工具方法总结"><a href="#2-1静态工具方法总结" class="headerlink" title="2.1静态工具方法总结"></a>2.1静态工具方法总结</h2><p><img src="https://pic.imgdb.cn/item/6575a82fc458853aef531973.jpg"></p>
<p>上述的方法与IService中的方法名是相同的，不同的是IService中的方法是非静态的.</p>
<p>和IService不同的是，IService在定义的时候就需要指定泛型，但是DB静态方法是在调用的时候传入对象的字节码</p>
<p>举例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据userid查询用户以及地址</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> UserVO <span class="title function_">queryUserAndAddressByUserId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">       <span class="comment">// 查询用户</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(id);</span><br><span class="line">       <span class="keyword">if</span> (user == <span class="literal">null</span> || user.getStatus().equals(UserContants.USER_STATUS_NOT_NORMAL))&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户查询失败&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 查询地址</span></span><br><span class="line">       List&lt;Address&gt; addresses = Db.lambdaQuery(Address.class).eq(Address::getUserId, id).list();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 封装VO</span></span><br><span class="line">       <span class="comment">// 转UserPo 为 UserVo</span></span><br><span class="line">       <span class="type">UserVO</span> <span class="variable">userVO</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserVO.class);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (CollUtil.isNotEmpty(addresses))&#123;</span><br><span class="line">           <span class="comment">// 这里使用的是BeanUtil工具的拷贝功能，也可以对集合进行拷贝</span></span><br><span class="line">           List&lt;AddressVO&gt; addressVOS = BeanUtil.copyToList(addresses, AddressVO.class);</span><br><span class="line">           userVO.setAddress(addressVOS);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> userVO;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-MP的枚举处理器"><a href="#3-MP的枚举处理器" class="headerlink" title="3.MP的枚举处理器"></a>3.MP的枚举处理器</h1><p>场景说明:</p>
<p>User类中有一个用户状态字段:<code>private Integer status</code>(1:正常，2冻结),我们可以使用枚举来表示状态</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">UserStatus</span>&#123;</span><br><span class="line">	NORMAL(<span class="number">1</span>,<span class="string">&quot;正常&quot;</span>),</span><br><span class="line">	FREEZE(<span class="number">2</span>,<span class="string">&quot;冻结&quot;</span>);</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> value;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String desc;</span><br><span class="line">	</span><br><span class="line">	UserStatus(<span class="type">int</span> value,String desc)&#123;</span><br><span class="line">		<span class="built_in">this</span>.value = value;</span><br><span class="line">		<span class="built_in">this</span>.desc = desc;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>于是上述的用户状态字段改为:<code>private UserStatus status</code>,这样代码中就不会出现魔法值1，2，可以使用NORMAL等枚举来代替。</p>
<p>但是这样的方法带来的另外一个问题，数据库表中的状态为int，但是枚举类的类型为UserStatus.于是出现了枚举类型和数据类型的相互转换.例如Java数据类型和数据库表的数据类型的相互转换.底层是由Mybatis来处理的.</p>
<p>MybatisPlus提供了类型转换的方法</p>
<p>1.准备枚举类，给枚举类添加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">UserStatus</span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 枚举字段</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	NORMAL(<span class="number">1</span>,<span class="string">&quot;正常&quot;</span>),</span><br><span class="line">	FREEZE(<span class="number">2</span>,<span class="string">&quot;冻结&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="meta">@EnumValue</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> value;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String desc;</span><br><span class="line">	</span><br><span class="line">	UserStatus(<span class="type">int</span> value,String desc)&#123;</span><br><span class="line">		<span class="built_in">this</span>.value = value;</span><br><span class="line">		<span class="built_in">this</span>.desc = desc;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.配置枚举处理器</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:mapper/*.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">default-enum-type-handler:</span> <span class="string">com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler</span></span><br></pre></td></tr></table></figure>

<p>3.更改业务处理代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据userid查询用户以及地址</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> UserVO <span class="title function_">queryUserAndAddressByUserId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">       <span class="comment">// 查询用户</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(id);</span><br><span class="line">       <span class="keyword">if</span> (user == <span class="literal">null</span> || user.getStatus() == UserStatus.FREEZE)&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户查询失败&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 查询地址</span></span><br><span class="line">       List&lt;Address&gt; addresses = Db.lambdaQuery(Address.class).eq(Address::getUserId, id).list();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 封装VO</span></span><br><span class="line">       <span class="comment">// 转UserPo 为 UserVo</span></span><br><span class="line">       <span class="type">UserVO</span> <span class="variable">userVO</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserVO.class);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (CollUtil.isNotEmpty(addresses))&#123;</span><br><span class="line">           List&lt;AddressVO&gt; addressVOS = BeanUtil.copyToList(addresses, AddressVO.class);</span><br><span class="line">           userVO.setAddress(addressVOS);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> userVO;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>以这种方法返回给前端的数据展示为NORMAL或者为FREEZE，这样并不直观,于是使用@JsonValue进行设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">UserStatus</span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 枚举字段</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	NORMAL(<span class="number">1</span>,<span class="string">&quot;正常&quot;</span>),</span><br><span class="line">	FREEZE(<span class="number">2</span>,<span class="string">&quot;冻结&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="meta">@EnumValue</span></span><br><span class="line">	<span class="meta">@JsonValue</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> value;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String desc;</span><br><span class="line">	</span><br><span class="line">	UserStatus(<span class="type">int</span> value,String desc)&#123;</span><br><span class="line">		<span class="built_in">this</span>.value = value;</span><br><span class="line">		<span class="built_in">this</span>.desc = desc;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>其中@JsonValue注解写在value上就返回数字，写在desc上就返回文字</strong></p>
<h1 id="4-MP的JSON处理器"><a href="#4-MP的JSON处理器" class="headerlink" title="4.MP的JSON处理器"></a>4.MP的JSON处理器</h1><p>在数据库中往往有一些JSON数据格式的数据，但是JAVA中并没有JSON数据类型。于是出现了在java中想要取出JSON中的数据却无法实现，MP的JSON处理器便可以处理这个问题.</p>
<p>1.创建JSON实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor(staticName = &quot;of&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String intro;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中<code>staticName = &quot;of&quot;</code></p>
<ul>
<li><code>@AllArgsConstructor</code> 是 Lombok 提供的一个注解，它会为类生成一个包含所有参数的构造函数。</li>
<li><code>staticName = &quot;of&quot;</code> 是 <code>@AllArgsConstructor</code> 注解的一个参数，用于指定生成的静态工厂方法的名称。在这个例子中，指定了静态工厂方法的名称为 <code>of</code>。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;user&quot;,autoResultMap = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册手机号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 详细信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(typeHandler = JacksonTypeHandler.class)</span></span><br><span class="line">    <span class="keyword">private</span> UserInfo info;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用状态（1正常 2冻结）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> UserStatus status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 账户余额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer balance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在指定JSON属性上添加@TableField(typeHandler &#x3D; JacksonTypeHandler.class)注解，在类上添加注解@TableName(value &#x3D; “user”,autoResultMap &#x3D; true).</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>MybatisPlus</tag>
        <tag>java</tag>
        <tag>代码生成</tag>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>MybatisPlus插件功能</title>
    <url>/2023/12/10/MybatisPlus%E6%8F%92%E4%BB%B6%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id="1-MybatisPlus提供的插件"><a href="#1-MybatisPlus提供的插件" class="headerlink" title="1.MybatisPlus提供的插件"></a>1.MybatisPlus提供的插件</h1><h2 id="1-1-分页插件"><a href="#1-1-分页插件" class="headerlink" title="1.1 分页插件"></a>1.1 分页插件</h2><p>MybatisPlus提供了分页的插件，使用MP的分页插件可以简化项目开发中的分页需求.</p>
<h3 id="1-1-1-分页插件的使用"><a href="#1-1-1-分页插件的使用" class="headerlink" title="1.1.1 分页插件的使用"></a>1.1.1 分页插件的使用</h3><h4 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h4><p>首先要在配置类中注册MybatisPlus的核心插件,同时添加分页插件:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span> &#123;    </span><br><span class="line">    <span class="meta">@Bean</span>    </span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;      </span><br><span class="line">        <span class="comment">// 1.初始化核心插件</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();    </span><br><span class="line">        <span class="comment">// 2.添加分页插件       </span></span><br><span class="line">        <span class="type">PaginationInnerInterceptor</span> <span class="variable">pageInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL);        			    pageInterceptor.setMaxLimit(<span class="number">1000L</span>); <span class="comment">// 设置分页上限</span></span><br><span class="line">        interceptor.addInnerInterceptor(pageInterceptor);       </span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h4><p>完成了配置类后就可以使用分页的API了</p>
<p><img src="https://pic.imgdb.cn/item/6575c6aac458853aef1716d9.jpg"></p>
<h3 id="1-1-2-编写测试类测试"><a href="#1-1-2-编写测试类测试" class="headerlink" title="1.1.2 编写测试类测试"></a>1.1.2 编写测试类测试</h3><p>编写测试类测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 分页查询测试</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPageQuery</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">pageNo</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">       <span class="comment">// 1.准备分页条件</span></span><br><span class="line">       Page&lt;User&gt; page = Page.of(pageNo, pageSize);</span><br><span class="line">       <span class="comment">// 1.1准备排序条件 true 为升序</span></span><br><span class="line">       page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(<span class="string">&quot;balance&quot;</span>,<span class="literal">true</span>));</span><br><span class="line">       <span class="comment">// 1.2余额相等的情况下 按照id升序排序</span></span><br><span class="line">       page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(<span class="string">&quot;id&quot;</span>,<span class="literal">true</span>));</span><br><span class="line">       <span class="comment">// 2.分页查询</span></span><br><span class="line">       Page&lt;User&gt; userPage = iUserService.page(page);</span><br><span class="line">       <span class="comment">// 3.解析</span></span><br><span class="line">       <span class="comment">// 总条数</span></span><br><span class="line">       <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> userPage.getTotal();</span><br><span class="line">       <span class="comment">// 总页数</span></span><br><span class="line">       <span class="type">long</span> <span class="variable">pages</span> <span class="operator">=</span> userPage.getPages();</span><br><span class="line">       <span class="comment">// 总数据</span></span><br><span class="line">       List&lt;User&gt; users = userPage.getRecords();</span><br><span class="line">       System.out.println(<span class="string">&quot;查询起始页为:&quot;</span> + pageNo);</span><br><span class="line">       System.out.println(<span class="string">&quot;查询的页数为:&quot;</span> + pageSize);</span><br><span class="line">       System.out.println(<span class="string">&quot;查询的总条数为:&quot;</span> + total);</span><br><span class="line">       System.out.println(<span class="string">&quot;查询的总页数为:&quot;</span> + pages);</span><br><span class="line">       <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">           System.out.println(user);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><strong>如果查询出的结果中文显示为乱码，则按照下面的方法进行解决:</strong></p>
<p>在SpringBoot整合Mybatis进行mapper测试查询时，发现返回的中文结果一直是乱码，无论修改yml配置文件还是数据库参数都无法解决，最后发现原因是项目中的SDK以及项目语言级别不对，应该设计JDK1.8，项目语言级别应为8.</p>
<p>测试成功</p>
<h3 id="1-1-3-总结"><a href="#1-1-3-总结" class="headerlink" title="1.1.3 总结"></a>1.1.3 总结</h3><p>总结MybatisPlus使用步骤:</p>
<ol>
<li>创建MybatisPlusConfog配置类，在配置类中声明MybatisPlusInterceptor拦截器方法</li>
<li>创建分页插件并添加分页插件</li>
<li>使用Page.of(pageNo,pageSize)方法传入页码和大小，返回Page&lt;&gt;对象并指定泛型,可以使用page.addOrder指定字段升序降序,true为升序</li>
<li>使用userService.page(page)的分页方法</li>
<li>使用page.get__()方法获取数据</li>
</ol>
<h2 id="1-2-通用分页实体"><a href="#1-2-通用分页实体" class="headerlink" title="1.2 通用分页实体"></a>1.2 通用分页实体</h2><p>上述分页只是一个简单的测试，但在实际开发中不会有那么简单的案例</p>
<p>简单分页查询案例:</p>
<p><strong>需求：遵循下面的接口规范，编写一个UserController接口，实现User的分页查询</strong></p>
<p><img src="https://pic.imgdb.cn/item/6575cfdcc458853aef57071e.jpg"></p>
<p><strong>返回结果</strong></p>
<p><img src="https://pic.imgdb.cn/item/6575d01ec458853aef58cb96.jpg"></p>
<p>由于分页需求不止查询用户需要，别的业务可能也需要，于是将分页功能单独封装为一个类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageQuery</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageNo;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageSize;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String sortBy;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 升序降序 false降序 true升序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isAsc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在需要分页功能的类上继承这个方法即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserQuery</span> <span class="keyword">extends</span> <span class="title class_">PageQuery</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最低余额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer minBalance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最高余额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxBalance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>统一返回结果</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageDTO</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 总条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer total;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 总页数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer pages;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回数据集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-1-编码实现分页查询"><a href="#1-2-1-编码实现分页查询" class="headerlink" title="1.2.1 编码实现分页查询"></a>1.2.1 编码实现分页查询</h3><ol>
<li>创建业务层接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PageDTO&lt;UserVO&gt; <span class="title function_">queryUsersPage</span><span class="params">(UserQuery userQuery)</span>;</span><br></pre></td></tr></table></figure>

<p>其中的UserQuery为:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserQuery</span> <span class="keyword">extends</span> <span class="title class_">PageQuery</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最低余额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer minBalance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最高余额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxBalance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>实现业务层接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userQuery</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageDTO&lt;UserVO&gt; <span class="title function_">queryUsersPage</span><span class="params">(UserQuery userQuery)</span> &#123;</span><br><span class="line">		<span class="comment">// 先获取前端传来的姓名和账号状态</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> userQuery.getName();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> userQuery.getStatus();</span><br><span class="line">        <span class="comment">// 构建分页条件 传入前端传来的页码和分页大小</span></span><br><span class="line">        Page&lt;User&gt; page = Page.of(userQuery.getPageNo(), userQuery.getPageSize());</span><br><span class="line">        <span class="comment">// 设置排序条件</span></span><br><span class="line">        <span class="comment">// 设置条件</span></span><br><span class="line">        <span class="comment">// 使用工具类</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(userQuery.getSortBy()))&#123;</span><br><span class="line">            <span class="comment">// 排序条件为空，则按照更新时间排序</span></span><br><span class="line">            page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(<span class="string">&quot;updateTime&quot;</span>,<span class="literal">false</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 排序条件不为空，则按照指定字段排序</span></span><br><span class="line">            page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(userQuery.getSortBy(),userQuery.isAsc()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 分页查询</span></span><br><span class="line">        <span class="comment">// 使用MP的Lambda查询</span></span><br><span class="line">        Page&lt;User&gt; userPage = lambdaQuery().like(name != <span class="literal">null</span>, User::getUsername, name)</span><br><span class="line">                .eq(User::getStatus, status)</span><br><span class="line">                .between(userQuery.getMinBalance() != <span class="literal">null</span> &amp;&amp; userQuery.getMaxBalance() != <span class="literal">null</span></span><br><span class="line">                        ,User::getBalance, userQuery.getMinBalance(), userQuery.getMaxBalance())</span><br><span class="line">                .page(page);</span><br><span class="line">        <span class="comment">// 封装VO结果</span></span><br><span class="line">        PageDTO&lt;UserVO&gt; dto = <span class="keyword">new</span> <span class="title class_">PageDTO</span>&lt;&gt;();</span><br><span class="line">        dto.setTotal(userPage.getTotal());</span><br><span class="line">        dto.setPages(userPage.getPages());</span><br><span class="line">        <span class="comment">// 获取数据</span></span><br><span class="line">        List&lt;User&gt; users = userPage.getRecords();</span><br><span class="line">        <span class="comment">// 将users -&gt; userVo</span></span><br><span class="line">        <span class="keyword">if</span> (CollUtil.isEmpty(users))&#123;</span><br><span class="line">            <span class="comment">// 如果没查到</span></span><br><span class="line">            dto.setList(Collections.emptyList());</span><br><span class="line">            <span class="keyword">return</span> dto;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 拷贝UserVo</span></span><br><span class="line">        <span class="comment">// 使用工具类</span></span><br><span class="line">        List&lt;UserVO&gt; userVOS = BeanUtil.copyToList(users, UserVO.class);</span><br><span class="line">        dto.setList(userVOS);</span><br><span class="line">        <span class="comment">// 返回结果</span></span><br><span class="line">        <span class="keyword">return</span> dto;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>其中需要说明的是PageQuery封装了所有需求常见的分页条件，例如pageNo,pageSize,sortBy,isAsc等，在其他查询例如UserQuery中可以继承PageQuery.</p>
<p>PageDTO封装了返回前端的数据，例如pages(总页数),totals总条数以及List&lt;?&gt;返回泛型类型数据集合.</p>
<h2 id="1-3-插件功能-通用分页实体与MP转换"><a href="#1-3-插件功能-通用分页实体与MP转换" class="headerlink" title="1.3 插件功能-通用分页实体与MP转换"></a>1.3 插件功能-通用分页实体与MP转换</h2><p>我们自己封装了一部分的分页工具，但是在某些程度上来讲还是比较麻烦的。例如当我们拿到前端传来的UserQuery后还是需要我们自己去构建分页条件然后封装为Page对象，封装的过程比较麻烦，并且代码上与业务没有关系，所以逻辑都是通用的。于是我们可以封装工具类解决这个问题。另一个麻烦的地方是对查询条件的解析然后封装为DTO并判断是否为空，这里与业务逻辑没有关系，这里也需要做封装.</p>
<p><strong>需求</strong></p>
<ul>
<li>在PageQuery中定义方法，将前端传来的PageQuery对象转换为MybatisPlus中的Page对象</li>
<li>在PageDTO中定义方法，将MybatisPlus中的page结果转换为PageDTO结果.</li>
</ul>
<p>在实体类中定义方法是为了使逻辑更加清晰</p>
<p>对PageQuery进行封装</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageQuery</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">pageNo</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String sortBy;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 升序降序 false降序 true升序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isAsc</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderItem 可变参数排序条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Page&lt;T&gt; <span class="title function_">toMpPage</span><span class="params">(OrderItem ... orderItem)</span>&#123;</span><br><span class="line">        <span class="comment">// 构建分页条件</span></span><br><span class="line">        Page&lt;T&gt; page = Page.of(pageNo, pageSize);</span><br><span class="line">        <span class="comment">// 设置排序条件</span></span><br><span class="line">        <span class="comment">// 设置条件</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(getSortBy()))&#123;</span><br><span class="line">            <span class="comment">// 排序条件为空，则按照更新时间排序</span></span><br><span class="line">            page.addOrder(orderItem);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderItem != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 排序条件不为空，则按照指定字段排序</span></span><br><span class="line">            page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(getSortBy(),isAsc()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按照更新时间降序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Page&lt;T&gt; <span class="title function_">toMpPageByUpdateTime</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> toMpPage(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(<span class="string">&quot;update_time&quot;</span>,<span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按照创建时间降序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Page&lt;T&gt; <span class="title function_">toMpPageByCreateTime</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> toMpPage(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(<span class="string">&quot;create_time&quot;</span>,<span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按照自定义字段进行升序或降序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defaultSortBy 自定义方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isAsc 升序降序 true 升序 false：降序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Page&lt;T&gt; <span class="title function_">toMpPageByCustom</span><span class="params">(String defaultSortBy,<span class="type">boolean</span> isAsc)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> toMpPage(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(defaultSortBy,isAsc));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对封装Vo进行封装代码进行封装</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * userPage转换为PageDTO</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> &lt;PO,VO&gt; PageDTO&lt;VO&gt; <span class="title function_">of</span><span class="params">(Page&lt;PO&gt; userPage,Class&lt;VO&gt; voClass)</span>&#123;</span><br><span class="line">       <span class="comment">// 封装VO结果</span></span><br><span class="line">       PageDTO&lt;VO&gt; dto = <span class="keyword">new</span> <span class="title class_">PageDTO</span>&lt;&gt;();</span><br><span class="line">       dto.setTotal(userPage.getTotal());</span><br><span class="line">       dto.setPages(userPage.getPages());</span><br><span class="line">       <span class="comment">// 获取数据</span></span><br><span class="line">       List&lt;PO&gt; users = userPage.getRecords();</span><br><span class="line">       <span class="comment">// 将users -&gt; userVo</span></span><br><span class="line">       <span class="keyword">if</span> (CollUtil.isEmpty(users))&#123;</span><br><span class="line">           <span class="comment">// 如果没查到</span></span><br><span class="line">           dto.setList(Collections.emptyList());</span><br><span class="line">           <span class="keyword">return</span> dto;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 拷贝UserVo</span></span><br><span class="line">       List&lt;VO&gt; userVOS = BeanUtil.copyToList(users, voClass);</span><br><span class="line">       dto.setList(userVOS);</span><br><span class="line">       <span class="keyword">return</span> dto;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>最后改善业务层代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 分页查询</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> userQuery</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> PageDTO&lt;UserVO&gt; <span class="title function_">queryUsersPage</span><span class="params">(UserQuery userQuery)</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> userQuery.getName();</span><br><span class="line">       <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> userQuery.getStatus();</span><br><span class="line">       Page&lt;User&gt; page = userQuery.toMpPageByUpdateTime();</span><br><span class="line">       <span class="comment">// 分页查询</span></span><br><span class="line">       Page&lt;User&gt; userPage = lambdaQuery().like(name != <span class="literal">null</span>, User::getUsername, name)</span><br><span class="line">               .eq(User::getStatus, status)</span><br><span class="line">               .between(userQuery.getMinBalance() != <span class="literal">null</span> &amp;&amp; userQuery.getMaxBalance() != <span class="literal">null</span></span><br><span class="line">                       ,User::getBalance, userQuery.getMinBalance(), userQuery.getMaxBalance())</span><br><span class="line">               .page(page);</span><br><span class="line">       <span class="comment">// 封装VO结果返回</span></span><br><span class="line">       <span class="keyword">return</span> PageDTO.of(userPage,UserVO.class);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>MybatisPlus学习结束</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>MybatisPlus</tag>
        <tag>java</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>基于SpringBoot、MybatisPlus以及knife4j的MP分页查询demo</title>
    <url>/2023/12/11/%E5%9F%BA%E4%BA%8ESpringBoot%E3%80%81MybatisPlus%E4%BB%A5%E5%8F%8Aknife4j%E7%9A%84MP%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2demo/</url>
    <content><![CDATA[<h1 id="1-设计数据库表"><a href="#1-设计数据库表" class="headerlink" title="1.设计数据库表"></a>1.设计数据库表</h1><p>在实现基于SpringBoot、MybatisPlus、knife4j的MP分页查询之前需要先设计数据库以及表，由于本次demo不是严格意义上的项目，因此设计表时没有太下功夫.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Navicat Premium Data Transfer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Source Server         : MySQL80</span></span><br><span class="line"><span class="comment"> Source Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Source Server Version : 80030</span></span><br><span class="line"><span class="comment"> Source Host           : localhost:3306</span></span><br><span class="line"><span class="comment"> Source Schema         : mp_test</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Target Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Target Server Version : 80030</span></span><br><span class="line"><span class="comment"> File Encoding         : 65001</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Date: 11/12/2023 17:09:05</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE MP_TEST;</span><br><span class="line">USE MP_TEST;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>`  (</span><br><span class="line">  `user_id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;用户id，自增&#x27;</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户账号&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户密码&#x27;</span>,</span><br><span class="line">  `sex` tinyint <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户性别 0:女 1:男&#x27;</span>,</span><br><span class="line">  `phone` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户手机号&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户账号创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户账号更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`user_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;张飞&#x27;</span>, <span class="string">&#x27;12345678&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;15699999999&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:28&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:33&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;关羽&#x27;</span>, <span class="string">&#x27;12345678&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;15699999999&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:28&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:33&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;刘备&#x27;</span>, <span class="string">&#x27;12345678&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;15699999999&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:28&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:33&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;曹操&#x27;</span>, <span class="string">&#x27;12345678&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;15699999999&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:28&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:33&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">&#x27;孙权&#x27;</span>, <span class="string">&#x27;12345678&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;15699999999&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:28&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:33&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">&#x27;孙尚香&#x27;</span>, <span class="string">&#x27;12345678&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;15699999999&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:28&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:33&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="string">&#x27;曹爽&#x27;</span>, <span class="string">&#x27;12345678&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;15699999999&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:28&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:33&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="string">&#x27;徐盛&#x27;</span>, <span class="string">&#x27;12345678&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;15699999999&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:28&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:33&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">9</span>, <span class="string">&#x27;诸葛亮&#x27;</span>, <span class="string">&#x27;12345678&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;15699999999&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:28&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:33&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="string">&#x27;鲍三娘&#x27;</span>, <span class="string">&#x27;12345678&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;15699999999&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:28&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:33&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">11</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;12345678&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;15699999999&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:28&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:33&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">12</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;12345678&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;15699999999&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:28&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:33&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">13</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;12345678&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;15699999999&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:28&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:33&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">14</span>, <span class="string">&#x27;虞姬&#x27;</span>, <span class="string">&#x27;12345678&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;15699999999&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:28&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:33&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">15</span>, <span class="string">&#x27;项羽&#x27;</span>, <span class="string">&#x27;12345678&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;15699999999&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:28&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:33&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">16</span>, <span class="string">&#x27;刘邦&#x27;</span>, <span class="string">&#x27;12345678&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;15699999999&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:28&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:33&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">17</span>, <span class="string">&#x27;张文&#x27;</span>, <span class="string">&#x27;12345678&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;15699999999&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:28&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:33&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">18</span>, <span class="string">&#x27;张武&#x27;</span>, <span class="string">&#x27;12345678&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;15699999999&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:28&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:33&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">19</span>, <span class="string">&#x27;张二&#x27;</span>, <span class="string">&#x27;12345678&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;15699999999&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:28&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:33&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">20</span>, <span class="string">&#x27;张一&#x27;</span>, <span class="string">&#x27;12345678&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;15699999999&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:28&#x27;</span>, <span class="string">&#x27;2023-12-11 10:48:33&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h1 id="2-创建SpringBoot项目并进行配置"><a href="#2-创建SpringBoot项目并进行配置" class="headerlink" title="2.创建SpringBoot项目并进行配置"></a>2.创建SpringBoot项目并进行配置</h1><p>接下来创建SpringBoot项目.</p>
<p>SpringBoot项目创建完成后引入本次demo所需依赖以及配置项目.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--数据库连接池--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--lombok注解类--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--单元测试类--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--mybatis-plus依赖--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--knife4j--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--hutool工具 用于拷贝对象和集合--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>导入demo所需依赖后还需要进行配置，在application.yml中进行配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">  	<span class="comment"># 数据库驱动</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="comment"># 数据库url</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mp_test?useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="comment"># 数据库用户名</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="comment"># 数据库密码</span></span><br><span class="line">    <span class="attr">password:</span> </span><br><span class="line">  <span class="comment"># 这里需要开启这个配置，不然后面的knife4j启动时会出现依赖冲突的问题</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">pathmatch:</span></span><br><span class="line">      <span class="attr">matching-strategy:</span> <span class="string">ant_path_matcher</span></span><br><span class="line"><span class="comment"># 扫描mapper.xml文件</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:mapper/*.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment"># 开启驼峰命名</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>配置项准备好后，主备两个配置类，分别是MybatisPlus分页插件类以及knif4j的配置类.</p>
<p>MybatisPlus插件配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 获取分页拦截器</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">// 获取分页插件</span></span><br><span class="line">        <span class="type">PaginationInnerInterceptor</span> <span class="variable">innerInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL);</span><br><span class="line">        <span class="comment">// 设置分页查询上限</span></span><br><span class="line">        innerInterceptor.setMaxLimit(<span class="number">1000L</span>);</span><br><span class="line">        <span class="comment">// 将插件添加到拦截器</span></span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(innerInterceptor);</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Knife4j配置类:<img src="/"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2WebMvc</span></span><br><span class="line"><span class="comment">// 对JSR303提供支持</span></span><br><span class="line"><span class="meta">@Import(BeanValidatorPluginsConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Knife4jConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">defaultApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .groupName(<span class="string">&quot;基于MybatisPlus的分页查询&quot;</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">// 添加@Api注解才显示</span></span><br><span class="line">                .apis(RequestHandlerSelectors.withClassAnnotation(Api.class))</span><br><span class="line">                <span class="comment">// 这里指定Controller扫描包路径</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;xju.edu&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * swagger-api接口描述信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;基于MybatisPlus的分页查询&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;MybatisPlus分页查询demo&quot;</span>)</span><br><span class="line">                .contact(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Contact</span>(</span><br><span class="line">                                <span class="string">&quot;yang&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;http://localhost:8888&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;2098116562@qq.com&quot;</span></span><br><span class="line">                        )</span><br><span class="line">                )</span><br><span class="line">                .version(<span class="string">&quot;1.0.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-代码生成"><a href="#3-代码生成" class="headerlink" title="3.代码生成"></a>3.代码生成</h1><p>使用MP的代码生成功能根据数据库的表生成代码.</p>
<p><img src="https://pic.imgdb.cn/item/6576f1b5c458853aef63780a.jpg"></p>
<p>进行简单的信息填写后，点击code generatro,自动生成代码</p>
<h1 id="4-编写DTO，Query，VO"><a href="#4-编写DTO，Query，VO" class="headerlink" title="4.编写DTO，Query，VO"></a>4.编写DTO，Query，VO</h1><p>PageDTO用于统一结果返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageDTO</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回的总页数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long totalPage;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回的总条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long totalRecords;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回数据列表</span></span><br><span class="line"><span class="comment">     * T 泛型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserVO用于返回前端展示视图</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserVO</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户性别 0 女 1 男</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户手机号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Query用于接收前端传递的参数然后进行后端查询</p>
<p>UserQuery</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserQuery</span> <span class="keyword">extends</span> <span class="title class_">PageQuery</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户性别 0 女 1 男</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户手机号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PageQuery:对所有需求都需要进行查询的内容进行封装</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageQuery</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">pageNo</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每页显示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按照什么字段排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String sortBy;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 升序降序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Boolean</span> <span class="variable">isAsc</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<h1 id="5-编写业务层"><a href="#5-编写业务层" class="headerlink" title="5.编写业务层"></a>5.编写业务层</h1><h2 id="5-1-根据pageNo-pageSize-sortBy-isAsc进行分页查询"><a href="#5-1-根据pageNo-pageSize-sortBy-isAsc进行分页查询" class="headerlink" title="5.1 根据pageNo,pageSize,sortBy,isAsc进行分页查询"></a>5.1 根据pageNo,pageSize,sortBy,isAsc进行分页查询</h2><p>这个需求是前端不传递任何关键字进行分页查询，即用户想要获取第pageNo页的pageSize条数据</p>
<p>实现的思路是首先使用Page.of(pageNo,pageSize)进行分页设置，然后判断前端是否传了排序关键字，如果没有则按照user_id进行升序排序,否则按照用户传递的进行排序.经过设置后获取到Page<User> 的对象.使用lambdaQuery.page()方法将之前获取到的Page<User>对象传入进行MP分页查询.然后进行返回结果封装.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 用户查询全部分页查询</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> pageQuery</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> PageDTO&lt;UserVO&gt; <span class="title function_">userAllPageQuery</span><span class="params">(PageQuery pageQuery)</span> &#123;</span><br><span class="line"></span><br><span class="line">       Page&lt;User&gt; userPage = Page.of(pageQuery.getPageNo(), pageQuery.getPageSize());</span><br><span class="line">       <span class="comment">// 判断前端是否传递了排序字段以及升序降序</span></span><br><span class="line">       <span class="keyword">if</span> (StringUtils.isBlank(pageQuery.getSortBy()))&#123;</span><br><span class="line">           <span class="comment">// 前端没有传递排序的条件 默认按照id进行升序排序</span></span><br><span class="line">           userPage.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(<span class="string">&quot;user_id&quot;</span>,<span class="literal">true</span>));</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">// 前端传递了条件</span></span><br><span class="line">           userPage.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(pageQuery.getSortBy(),pageQuery.getIsAsc()));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 使用lambdaQuery进行分页查询</span></span><br><span class="line">       Page&lt;User&gt; page = lambdaQuery().page(userPage);</span><br><span class="line">       PageDTO&lt;UserVO&gt; pageDTO = <span class="keyword">new</span> <span class="title class_">PageDTO</span>&lt;&gt;();</span><br><span class="line">       pageDTO.setTotalPage(page.getPages());</span><br><span class="line">       pageDTO.setTotalRecords(page.getTotal());</span><br><span class="line">       <span class="comment">// 获取数据</span></span><br><span class="line">       List&lt;User&gt; users = page.getRecords();</span><br><span class="line">       <span class="comment">// 将PO -&gt; VO</span></span><br><span class="line">       List&lt;UserVO&gt; userVOs = BeanUtil.copyToList(users, UserVO.class);</span><br><span class="line">       <span class="comment">// 将VO封装到pageDTO中</span></span><br><span class="line">       pageDTO.setList(userVOs);</span><br><span class="line">       <span class="keyword">return</span> pageDTO;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-2-根据前端传入关键字进行分页查询"><a href="#5-2-根据前端传入关键字进行分页查询" class="headerlink" title="5.2 根据前端传入关键字进行分页查询"></a>5.2 根据前端传入关键字进行分页查询</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据前端的条件分页查询</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> userQuery 前端传来的分页查询条件</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> PageDTO&lt;UserVO&gt; <span class="title function_">userPageQuery</span><span class="params">(UserQuery userQuery)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (userQuery == <span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户为空&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 构建Page分页条件</span></span><br><span class="line">       Page&lt;User&gt; page = Page.of(userQuery.getPageNo(), userQuery.getPageSize());</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 判断前端传来的字段排序是否为空</span></span><br><span class="line">       <span class="keyword">if</span> (StringUtils.isBlank(userQuery.getSortBy()))&#123;</span><br><span class="line">           <span class="comment">// 如果前端传来的数据为空 则默认设置排序字段为userId 升序排列</span></span><br><span class="line">           page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(<span class="string">&quot;userId&quot;</span>,<span class="literal">true</span>));</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">// 前端传来的排序字段不为空，则设置排序字段为前端传来的字段</span></span><br><span class="line">           page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(userQuery.getSortBy(),userQuery.getIsAsc()));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 使用LambdaQuery进行分页查询</span></span><br><span class="line">       Page&lt;User&gt; userPage = lambdaQuery().like(userQuery.getUsername() != <span class="literal">null</span>, User::getUsername, userQuery.getUsername())</span><br><span class="line">               .eq(userQuery.getPassword() != <span class="literal">null</span>, User::getPassword, userQuery.getPassword())</span><br><span class="line">               .eq(userQuery.getSex() != <span class="literal">null</span>, User::getSex, userQuery.getSex())</span><br><span class="line">               .eq(userQuery.getPhone() != <span class="literal">null</span>, User::getPhone, userQuery.getPhone()).page(page);</span><br><span class="line">       <span class="comment">// 我们要返回的是PageDTO&lt;UserVo&gt;</span></span><br><span class="line">       PageDTO&lt;UserVO&gt; pageDTO = <span class="keyword">new</span> <span class="title class_">PageDTO</span>&lt;&gt;();</span><br><span class="line">       pageDTO.setTotalPage(userPage.getPages());</span><br><span class="line">       pageDTO.setTotalRecords(userPage.getTotal());</span><br><span class="line">       <span class="comment">// 获取分页数据</span></span><br><span class="line">       List&lt;User&gt; users = userPage.getRecords();</span><br><span class="line">       <span class="comment">// 看是否查询到了用户</span></span><br><span class="line">       <span class="keyword">if</span> (CollectionUtils.isEmpty(users))&#123;</span><br><span class="line">           <span class="comment">// 查询的用户为空</span></span><br><span class="line">           pageDTO.setList(Collections.emptyList());</span><br><span class="line">           <span class="keyword">return</span> pageDTO;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 查询到了用户 将PO -&gt; VO</span></span><br><span class="line">       List&lt;UserVO&gt; userVO = BeanUtil.copyToList(users, UserVO.class);</span><br><span class="line">       pageDTO.setList(userVO);</span><br><span class="line">       <span class="keyword">return</span> pageDTO;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>思路同之前的差不多</p>
<h1 id="6-进行业务代码改进"><a href="#6-进行业务代码改进" class="headerlink" title="6.进行业务代码改进"></a>6.进行业务代码改进</h1><p>之前的代码实现逻辑还是比较复杂，现在根据之前的博客进行代码优化.</p>
<p>将设置分页条件的代码封装为方法:</p>
<p>封装前的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Page&lt;User&gt; userPage = Page.of(pageQuery.getPageNo(), pageQuery.getPageSize());</span><br><span class="line">       <span class="comment">// 判断前端是否传递了排序字段以及升序降序</span></span><br><span class="line">       <span class="keyword">if</span> (StringUtils.isBlank(pageQuery.getSortBy()))&#123;</span><br><span class="line">           <span class="comment">// 前端没有传递排序的条件 默认按照id进行升序排序</span></span><br><span class="line">           userPage.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(<span class="string">&quot;user_id&quot;</span>,<span class="literal">true</span>));</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">// 前端传递了条件</span></span><br><span class="line">           userPage.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(pageQuery.getSortBy(),pageQuery.getIsAsc()));</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<p>封装后的方法代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageQuery</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">pageNo</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每页显示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按照什么字段排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String sortBy;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 升序降序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Boolean</span> <span class="variable">isAsc</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将前端传递的query对象转换为MP的Page对象设置排序字段并返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderItems 排序条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Page&lt;T&gt; <span class="title function_">toMpPage</span><span class="params">(OrderItem ... orderItems)</span>&#123;</span><br><span class="line">        <span class="comment">// 设置分页条件</span></span><br><span class="line">        Page&lt;T&gt; page = Page.of(pageNo, pageSize);</span><br><span class="line">        <span class="comment">// 设置排序条件</span></span><br><span class="line">        <span class="comment">// 先判断传递的orderItems是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(getSortBy()))&#123;</span><br><span class="line">            <span class="comment">// 传递的排序字段为空</span></span><br><span class="line">            page.addOrder(orderItems);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 排序的字段不为空</span></span><br><span class="line">            page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(getSortBy(),getIsAsc()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按照userId进行升序排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderItems</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Page&lt;T&gt; <span class="title function_">toMpPageByUserId</span><span class="params">(OrderItem ... orderItems)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> toMpPage(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(<span class="string">&quot;user_id&quot;</span>,<span class="literal">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>将分页条件查询方法封装为方法:</p>
<p>封装前的代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用LambdaQuery进行分页查询</span></span><br><span class="line">        Page&lt;User&gt; userPage = lambdaQuery().like(userQuery.getUsername() != <span class="literal">null</span>, User::getUsername, userQuery.getUsername())</span><br><span class="line">                .eq(userQuery.getPassword() != <span class="literal">null</span>, User::getPassword, userQuery.getPassword())</span><br><span class="line">                .eq(userQuery.getSex() != <span class="literal">null</span>, User::getSex, userQuery.getSex())</span><br><span class="line">                .eq(userQuery.getPhone() != <span class="literal">null</span>, User::getPhone, userQuery.getPhone()).page(page);</span><br><span class="line">        <span class="comment">// 我们要返回的是PageDTO&lt;UserVo&gt;</span></span><br><span class="line">        PageDTO&lt;UserVO&gt; pageDTO = <span class="keyword">new</span> <span class="title class_">PageDTO</span>&lt;&gt;();</span><br><span class="line">        pageDTO.setTotalPage(userPage.getPages());</span><br><span class="line">        pageDTO.setTotalRecords(userPage.getTotal());</span><br><span class="line">        <span class="comment">// 获取分页数据</span></span><br><span class="line">        List&lt;User&gt; users = userPage.getRecords();</span><br><span class="line">        <span class="comment">// 看是否查询到了用户</span></span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(users))&#123;</span><br><span class="line">            <span class="comment">// 查询的用户为空</span></span><br><span class="line">            pageDTO.setList(Collections.emptyList());</span><br><span class="line">            <span class="keyword">return</span> pageDTO;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 查询到了用户 将PO -&gt; VO</span></span><br><span class="line">        List&lt;UserVO&gt; userVO = BeanUtil.copyToList(users, UserVO.class);</span><br><span class="line">        pageDTO.setList(userVO);</span><br><span class="line">        <span class="keyword">return</span> pageDTO;</span><br></pre></td></tr></table></figure>

<p>将部分代码抽取为通用方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageDTO</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回的总页数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long totalPage;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回的总条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long totalRecords;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回数据列表</span></span><br><span class="line"><span class="comment">     * T 泛型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; list;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * userPage转换为PageDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;PO,VO&gt; PageDTO&lt;VO&gt; <span class="title function_">of</span><span class="params">(Page&lt;PO&gt; userPage, Class&lt;VO&gt; voClass)</span>&#123;</span><br><span class="line">        <span class="comment">// 封装VO结果</span></span><br><span class="line">        PageDTO&lt;VO&gt; dto = <span class="keyword">new</span> <span class="title class_">PageDTO</span>&lt;&gt;();</span><br><span class="line">        dto.setTotalRecords(userPage.getTotal());</span><br><span class="line">        dto.setTotalPage(userPage.getPages());</span><br><span class="line">        <span class="comment">// 获取数据</span></span><br><span class="line">        List&lt;PO&gt; users = userPage.getRecords();</span><br><span class="line">        <span class="comment">// 将users -&gt; userVo</span></span><br><span class="line">        <span class="keyword">if</span> (CollUtil.isEmpty(users))&#123;</span><br><span class="line">            <span class="comment">// 如果没查到</span></span><br><span class="line">            dto.setList(Collections.emptyList());</span><br><span class="line">            <span class="keyword">return</span> dto;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 拷贝UserVo</span></span><br><span class="line">        List&lt;VO&gt; userVOs = BeanUtil.copyToList(users, voClass);</span><br><span class="line">        dto.setList(userVOs);</span><br><span class="line">        <span class="keyword">return</span> dto;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改善后的业务层代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据前端的条件分页查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userQuery 前端传来的分页查询条件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PageDTO&lt;UserVO&gt; <span class="title function_">userPageQuery</span><span class="params">(UserQuery userQuery)</span> &#123;</span><br><span class="line">    Page&lt;User&gt; page = userQuery.toMpPage();</span><br><span class="line">    <span class="comment">// 使用LambdaQuery进行分页查询</span></span><br><span class="line">    Page&lt;User&gt; userPage = lambdaQuery().like(userQuery.getUsername() != <span class="literal">null</span>, User::getUsername, userQuery.getUsername())</span><br><span class="line">            .eq(userQuery.getPassword() != <span class="literal">null</span>, User::getPassword, userQuery.getPassword())</span><br><span class="line">            .eq(userQuery.getSex() != <span class="literal">null</span>, User::getSex, userQuery.getSex())</span><br><span class="line">            .eq(userQuery.getPhone() != <span class="literal">null</span>, User::getPhone, userQuery.getPhone()).page(page);</span><br><span class="line">    <span class="keyword">return</span> PageDTO.of(userPage,UserVO.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="7-前后端联合测试"><a href="#7-前后端联合测试" class="headerlink" title="7.前后端联合测试"></a>7.前后端联合测试</h1><p>启动SpringBoot项目,访问localhost:8888&#x2F;doc.html,其中8888是自己配置的application.yml中的port端口号.</p>
<p><img src="https://pic.imgdb.cn/item/657716f0c458853aef010045.jpg"></p>
<p>启动成功出现这个界面就是配置成功</p>
<h2 id="7-1-测试根据pageNo-pageSize进行分页查询"><a href="#7-1-测试根据pageNo-pageSize进行分页查询" class="headerlink" title="7.1 测试根据pageNo,pageSize进行分页查询"></a>7.1 测试根据pageNo,pageSize进行分页查询</h2><p><img src="https://pic.imgdb.cn/item/657717aac458853aef0400f2.jpg"></p>
<p>传递参数为</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;pageNo&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;pageSize&quot;</span> <span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>意为查询第一页，一页展示5条数据，返回结果</p>
<p><img src="https://pic.imgdb.cn/item/6577183ac458853aef065f94.jpg"></p>
<p>查询成功</p>
<h2 id="7-2-根据前端传入关键字进行分页查询"><a href="#7-2-根据前端传入关键字进行分页查询" class="headerlink" title="7.2 根据前端传入关键字进行分页查询"></a>7.2 根据前端传入关键字进行分页查询</h2><p>根据条件查询</p>
<p><img src="https://pic.imgdb.cn/item/65771873c458853aef075d74.jpg"></p>
<p>传递的数据为:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;isAsc&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pageNo&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pageSize&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sortBy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user_id&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>即<strong>查找姓名中带张的所有用户，查询第一页，一页5条数据并以user_id查询进行升序排序</strong></p>
<p><img src="https://pic.imgdb.cn/item/65771948c458853aef0acaf7.jpg"></p>
<p>查询成功</p>
<h1 id="8-总结"><a href="#8-总结" class="headerlink" title="8.总结"></a>8.总结</h1><p>实现了基于SpringBoot，MybatisPlus，Knife4j的MP分页查询demo.</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>MybatisPlus</tag>
        <tag>java</tag>
        <tag>SpringBoot</tag>
        <tag>knife4j</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot中的参数传递</title>
    <url>/2023/12/12/SpringBoot%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/</url>
    <content><![CDATA[<p>今天复习SpringBoot项目中前后端参数传递的问题，主要是以下几个方面:</p>
<ol>
<li>Get 方式发送单个参数</li>
<li>Get 方式发送多个参数</li>
<li>Post发送参数</li>
<li>五种类型参数传递:普通参数、POJO类型参数、嵌套POJO类型参数、数组类型参数以及集合类型参数</li>
<li>JSON参数传输：JSON普通数组、JSON对象数据、JSON对象数组</li>
</ol>
<h1 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h1><p>主要是创建SpringBoot项目以及配置knife4j等配置类</p>
<ol>
<li>创建SpringBoot工程配置项目端口号</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">  	<span class="comment"># 解决knife4j和SpringFox版本冲突问题</span></span><br><span class="line">    <span class="attr">pathmatch:</span></span><br><span class="line">      <span class="attr">matching-strategy:</span> <span class="string">ant_path_matcher</span></span><br></pre></td></tr></table></figure>



<ol start="2">
<li>引入Knife4j依赖以及创建Knife4j配置类</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xju.edu.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"><span class="keyword">import</span> springfox.bean.validators.configuration.BeanValidatorPluginsConfiguration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2WebMvc;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2WebMvc</span></span><br><span class="line"><span class="comment">// 对JSR303提供支持</span></span><br><span class="line"><span class="meta">@Import(BeanValidatorPluginsConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Knife4jConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">defaultApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .groupName(<span class="string">&quot;SpringBoot中的参数传递&quot;</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">// 添加@Api注解才显示</span></span><br><span class="line">                .apis(RequestHandlerSelectors.withClassAnnotation(Api.class))</span><br><span class="line">                <span class="comment">// 这里指定Controller扫描包路径</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.xju.edu.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * swagger-api接口描述信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;SpringBoot中的参数传递&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;SpringBoot中的参数传递&quot;</span>)</span><br><span class="line">                .contact(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Contact</span>(</span><br><span class="line">                                <span class="string">&quot;yang&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;http://localhost:8888&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;2098116562@qq.com&quot;</span></span><br><span class="line">                        )</span><br><span class="line">                )</span><br><span class="line">                .version(<span class="string">&quot;1.0.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-普通参数传递"><a href="#2-普通参数传递" class="headerlink" title="2.普通参数传递"></a>2.普通参数传递</h1><h2 id="2-1-Get-方式发送接收单个参数"><a href="#2-1-Get-方式发送接收单个参数" class="headerlink" title="2.1 Get 方式发送接收单个参数"></a>2.1 Get 方式发送接收单个参数</h2><p>前端使用Get方式进行参数传递时，即把参数使用 ? 以及 &amp; 拼接在URL路径后</p>
<p>后端使用Get方式请求前端发来的单个数据只需要在方法的形参中使用String数据类型接收即可.</p>
<p><strong>这里需要注意的是这里后端形参的名称必须与前端传递的名称相同，否则接收不到数据</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;传递参数测试类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/oneParam&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;Get方式发送单个参数&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getOneParam</span><span class="params">(String username)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接收的单个参数为:&quot;</span> + username);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;info&#x27; : &#x27;Get方式接收单个参数&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前端使用相同参数名传递:</p>
<p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20231212211948387.png"></p>
<p>后端接收数据:</p>
<p><img src="https://pic.imgdb.cn/item/65785e3ac458853aef622e34.jpg"></p>
<p>前端使用不同参数名传递:</p>
<p><img src="https://pic.imgdb.cn/item/65785e72c458853aef6353bc.jpg"></p>
<p>后端接收数据:</p>
<p><img src="https://pic.imgdb.cn/item/65785e9cc458853aef64441c.jpg"></p>
<h2 id="2-2-Get-方式发送接收多个参数"><a href="#2-2-Get-方式发送接收多个参数" class="headerlink" title="2.2 Get 方式发送接收多个参数"></a>2.2 Get 方式发送接收多个参数</h2><p>前端使用Get方式发送多个普通参数到后端时，其实就是使用  ? 以及 &amp; 将参数拼接</p>
<p>控制层:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get 多个参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/Params&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;Get方式发送多个参数&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getParams</span><span class="params">(String username,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;姓名:&quot;</span> + username);</span><br><span class="line">    System.out.println(<span class="string">&quot;年龄:&quot;</span> + age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;info&#x27; : &#x27;Get方式接收多个参数&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前端传递参数:</p>
<p><img src="https://pic.imgdb.cn/item/65785ff1c458853aef6b320b.jpg"></p>
<p>后端接收参数:</p>
<p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20231212212903707.png"></p>
<p>这里需要注意的是传递的参数名也必须前后端保持一致，否则依然接收不到参数.</p>
<p>按照2.2的方式请求，则请求的路径其实为<a href="http://localhost:8888/user/Params?username=%E5%B0%8F%E6%98%8E&age=18">http://localhost:8888/user/Params?username=小明&amp;age=18</a></p>
<h2 id="2-3-Post-方式发送发送接收参数"><a href="#2-3-Post-方式发送发送接收参数" class="headerlink" title="2.3 Post 方式发送发送接收参数"></a>2.3 Post 方式发送发送接收参数</h2><p>使用Post方式对参数进行传递时，与Get方式最大的不同是Get方式传递的参数拼接在URL后，而Post方式传递的参数则包含在RequstBody中</p>
<p>控制层:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Post 多个参数</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@PostMapping(&quot;/Params&quot;)</span></span><br><span class="line">   <span class="meta">@ApiOperation(&quot;Post方式发送参数&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getParamsPost</span><span class="params">(String username,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;姓名:&quot;</span> + username);</span><br><span class="line">       System.out.println(<span class="string">&quot;年龄:&quot;</span> + age);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;info&#x27; : &#x27;Post方式接收多个参数&#x27;&#125;&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>接收成功，这里就不展示成功结果了，与上面的结果一样.</p>
<p>这里需要注意到的是<strong>这里前后端参数的命名也需要相同，否则也接收不到参数</strong></p>
<h2 id="2-4-Get-方式和-Post-方式-的不同"><a href="#2-4-Get-方式和-Post-方式-的不同" class="headerlink" title="2.4 Get 方式和 Post 方式 的不同"></a>2.4 Get 方式和 Post 方式 的不同</h2><ol>
<li><p>GET和POST最本质的区别是规范上的区别：在规范中，定义GET请求是用来获取资源的，也就是进行查询操作的；而POST请求是用来传输实体对象的，因此会使用POST来进行添加、修改和删除等操作。</p>
</li>
<li><p>GET请求参数通过URL传递，而POST的参数放在请求体中。</p>
</li>
<li><p>GET请求可以直接进行回退和刷新，不会对用户和程序产生任何影响，而POST请求如果直接回滚和刷新将会把数据再次提交。</p>
</li>
<li><p>GET请求一般会被缓存，比如常见的CSS、JS、HTML请求等都会被缓存；而POST请求默认是不进行缓存的</p>
</li>
<li><p>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</p>
</li>
</ol>
<h1 id="3-五种参数传递"><a href="#3-五种参数传递" class="headerlink" title="3.五种参数传递"></a>3.五种参数传递</h1><h2 id="3-1-普通参数传递"><a href="#3-1-普通参数传递" class="headerlink" title="3.1 普通参数传递"></a>3.1 普通参数传递</h2><p>为了解决之前参数传递中前后端参数名不统一的情况下后端无法接收到参数的问题，Spring提供了@RequestParam()注解来解决问题</p>
<p>控制层:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@RequestParam</span> 注解的作用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/annotationParam&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;@RequestParam解决前后端参数名不统一问题&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getParamsAnnotation</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String username, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;姓名:&quot;</span> + username);</span><br><span class="line">    System.out.println(<span class="string">&quot;年龄:&quot;</span> + age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;info&#x27; : &#x27;解决前后端参数名不统一问题&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前端使用@RequestParam()注解中的参数名传递</p>
<p><img src="https://pic.imgdb.cn/item/6578654ec458853aef856cb9.jpg"></p>
<p>后端接收成功</p>
<p>这里需要注意的是<strong>使用了@RequestParam注解后，使用原参数名也出错即使用username</strong></p>
<h2 id="3-2-POJO数据类型"><a href="#3-2-POJO数据类型" class="headerlink" title="3.2 POJO数据类型"></a>3.2 POJO数据类型</h2><p>首先后端创建UserDTO用于接收前端传递的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制层:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * pojo类型参数</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> userDTO</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/pojoParam&quot;)</span></span><br><span class="line">   <span class="meta">@ApiOperation(&quot;Pojo类型参数&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getParamsAnnotation</span><span class="params">(UserDTO userDTO)</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;姓名:&quot;</span> + userDTO.getUsername());</span><br><span class="line">       System.out.println(<span class="string">&quot;年龄:&quot;</span> + userDTO.getAge());</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;info&#x27; : &#x27;pojo类型参数&#x27;&#125;&quot;</span>;</span><br><span class="line">   &#125;	</span><br></pre></td></tr></table></figure>

<p>前端参数传递:</p>
<p><img src="https://pic.imgdb.cn/item/6578698dc458853aef98abca.jpg"></p>
<p>后端数据接收成功</p>
<p>这里需要注意的是:<strong>前端传递的数据要与POJO类型的属性名相同，否则无法接收数据</strong></p>
<h2 id="3-3-数组类型传递"><a href="#3-3-数组类型传递" class="headerlink" title="3.3 数组类型传递"></a>3.3 数组类型传递</h2><p>控制层代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 数组类型数据</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> likes</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/arrayParam&quot;)</span></span><br><span class="line">   <span class="meta">@ApiOperation(&quot;数组类型参数&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getArrayParams</span><span class="params">(String[] likes)</span>&#123;</span><br><span class="line">       System.out.println(likes.length);</span><br><span class="line">       System.out.println(Arrays.toString(likes));</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;info&#x27; : &#x27;数组类型参数&#x27;&#125;&quot;</span>;</span><br><span class="line">   &#125;	</span><br></pre></td></tr></table></figure>

<p>前端数据传递:</p>
<p><img src="https://pic.imgdb.cn/item/65786dc4c458853aefabac25.jpg"></p>
<p>这里由于Knife4j的限制，我只传递了一个数组元素，如果要传递多个数据元素，参数名必须都是相同的且与后端相同，例如likes</p>
<h2 id="3-4-集合类型传递"><a href="#3-4-集合类型传递" class="headerlink" title="3.4 集合类型传递"></a>3.4 集合类型传递</h2><p>控制层代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 集合类型参数传递</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> likes</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/listParam&quot;)</span></span><br><span class="line">   <span class="meta">@ApiOperation(&quot;集合类型参数&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getArrayParams</span><span class="params">(List&lt;String&gt; likes)</span>&#123;</span><br><span class="line">       System.out.println(likes.size());</span><br><span class="line">       System.out.println(likes);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;info&#x27; : &#x27;list类型参数&#x27;&#125;&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>这时候我们使用前端进行传输数据会报错</p>
<p><img src="https://pic.imgdb.cn/item/65786eddc458853aefb0b73d.jpg"></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">2023-12-12 22:31:30.756 ERROR 26620 --- [nio-8888-exec-4] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalStateException: No primary or single unique constructor found for interface java.util.List] with root cause</span><br></pre></td></tr></table></figure>

<p>错误的原因时是：SpringBoot将List看作是一个POJO对象来处理，将其创建一个对象并准备把前端的数据封装到对象中，但是List是一个接口无法创建对象，所以报错.</p>
<p>解决办法:使用@RequestParam注解</p>
<p>测试成功</p>
<h2 id="3-5-JSON数据传递"><a href="#3-5-JSON数据传递" class="headerlink" title="3.5 JSON数据传递"></a>3.5 JSON数据传递</h2><p>现在比较流行的开发方式是异步调用，前后端进行异步方式进行数据的交换，传输的数据使用的是JSON格式，所以当前端使用JSON格式发送数据时，后端如何接收.</p>
<p>对于JSON类型的数据，我们大致分为三种类型:</p>
<ul>
<li>普通数组</li>
<li>对象数组</li>
<li>json对象</li>
</ul>
<p>SpringMVC默认使用的是jackson来处理json数据的转换，所以需要在pom.xml中添加jackjson依赖.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-5-1-JSON数组数据传递"><a href="#3-5-1-JSON数组数据传递" class="headerlink" title="3.5.1 JSON数组数据传递"></a>3.5.1 JSON数组数据传递</h3><p>控制层代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * json数组类型数据传递</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> likes</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@PostMapping(&quot;/jsonParam&quot;)</span></span><br><span class="line">   <span class="meta">@ApiOperation(&quot;json数组类型参数&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getJsonParams</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;String&gt; likes)</span>&#123;</span><br><span class="line">       System.out.println(likes.size());</span><br><span class="line">       System.out.println(likes);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;info&#x27; : &#x27;json类型参数&#x27;&#125;&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>前端数据传递</p>
<p><img src="https://pic.imgdb.cn/item/65787208c458853aefbf37c6.jpg"></p>
<p>后端接收数据成功</p>
<p>这里需要注意的是:<strong>如果前端传递的是JSON数据，后端想要接收，就必须加上注解@RequestBody</strong></p>
<h3 id="3-5-2-JSON对象数据传递"><a href="#3-5-2-JSON对象数据传递" class="headerlink" title="3.5.2 JSON对象数据传递"></a>3.5.2 JSON对象数据传递</h3><p>控制层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对象数据类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/jsonObjParam&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;json对象类型参数&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getJsonObjectParams</span><span class="params">(<span class="meta">@RequestBody</span> UserDTO userDTO)</span>&#123;</span><br><span class="line">        System.out.println(userDTO.getUsername());</span><br><span class="line">        System.out.println(userDTO.getAge());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;info&#x27; : &#x27;json类型参数&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>前端数据传递:</p>
<p><img src="https://pic.imgdb.cn/item/657875fac458853aefd18526.jpg"></p>
<h3 id="3-5-3-JSON对象数组"><a href="#3-5-3-JSON对象数组" class="headerlink" title="3.5.3  JSON对象数组"></a>3.5.3  JSON对象数组</h3><p>控制层:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对象数组传递</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userDTOS</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/jsonObjArrayParam&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;json对象数组类型参数&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getJsonObjectArrayParams</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;UserDTO&gt; userDTOS)</span>&#123;</span><br><span class="line">        System.out.println(userDTOS.size());</span><br><span class="line">        System.out.println(userDTOS);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;info&#x27; : &#x27;json类型参数&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>前端传输数据:</p>
<p><img src="https://pic.imgdb.cn/item/6578773ac458853aefd6e612.jpg"></p>
<p>后端接收数据成功.</p>
<h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h1><ol>
<li>Get请求的参数拼接在URL后，Post请求的参数在RequestBody中</li>
<li>Get 方式 和 Post 方式 具有不同点</li>
<li>前后端参数名不统一使用@RequestParam注解</li>
<li>前端发送JSON数据后端接收使用@RequestBody注解</li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>java</tag>
        <tag>SprinigBoot</tag>
      </tags>
  </entry>
</search>
